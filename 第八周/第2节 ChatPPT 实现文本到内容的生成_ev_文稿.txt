	大家再看一下。
	变成播放了吗？
	我这好像有延迟，我看见好像还没到播放页，我再等等等一下，别再动了。刚刚那画面没动，现在可以了，这应该可以了，我再去群里吼一声。
	好。
	Hello, 大家能看见吗？声音正常吗？
	好的，那行，那我们就正式开始今天的内容。大家好，今天我们讲ChatGPT的实现，文本到内容的生成。这应该是正式开始签PPT这个项目的产品设计和研发相关的工作。第一节课可能更多的是给大家做了一个对于企业办公这个市场的一个调研，然后给大家做了一个相对偏量化的一个介绍，因为这个市场确实太大，然后我们聚焦到了powerpoint这个文件生成的具体的领域和技术方案。从这节课开始，我们会逐步的从一步一步的怎么样完成我们定下来的这个目标。就ChatGPT，有chat，有PPT。
	难点其实对于绝大部分人来说，这个学习门槛可能还是在PPT这个部分。因为PPT是一个复杂的文件格式，我特指这个powerpoint这个PPTX的结构，那么今天我们就会花比较多的时间，让大家先把这个难关给攻克下来，因为这个学习门槛比较相对来说比较陡峭，所以今天我们看到整个这节课的内容会分成两部分。一部分是python PPTX这个库它的一个快速入门与实践，第二部分是我们充分的了解了python p这个库的高层次API，因为这个库本身它是很很复杂的，它有高层次的API抽象，也有低层次的XML相关的一些操作。那么在0.1版本里面，其实就留下了一些低层次API的方法调用。然后很多同学可能也会感觉到奇怪，就这个remove所有的这个幻灯片到底是怎么操作的？为什么又涉及到了XML？我们明明是在讨论这个power point幻灯片这种数据类型，那XML和它又是什么关系？我们在用python PPTX的时候，需不需要关注底层的XML？
	这个是上半节课我们想要通过快速入门与实现这个PPTX这个库，让大家能够有所了解。包括整个库当中其实有很多的抽象概念，而且这些抽象概念其实跟powerpoint我们人肉眼看到的powerpoint里面的这些内容并不是直接对齐的。因为他要去操作这个文件类型，所以有很多我们看不见的抽象概念。其实在PPTX库里面也有。
	在上节课我们其实给大家讲了什么是power point的模板，而这个模板其实绝大部分同学平时用没有用过。那有了模板之后，又要怎么样用PPTX这个库去操作模板，同时还能操作真正的演示用的幻灯片，我们叫presentation或者slides，这个其实是有很多一些需要学习的概念，但通过我们上半节课希望大家能把它理清楚。那缕清楚的方法就是我们把它的核心数据结构，高层次的API的数据结构列出来。并且这些结构尽可能是跟我们人手工肉眼去看到的，office里面打开的power point是对齐的。而这些核心的数据结构又都有一些相对复杂的基层关系，但通过我们的梳理，希望大家能够理解它，并没有那么难。
	然后最后就是回到单页，因为整个PPT其实是由一页一页组成的，每一页是一个slide。这个slide里面有内容有格式，那么内容和格式又是如何通过PPTX的库去进行操作的那这些是我们今天想要通过上半节课让大家能够有一个全局性的掌握。下半节课是TIPPT0.2的文本到内容生成功能的研发。这个版本其实我们应该相对来说，了解了PTX这个库之后，再去看这个部分的代码就会非常的简单和好理解。我们在整个0.2里面其实拆分了一些新的模块，而这些模块其实是为未来的扩展去考虑的。就包括我们在0.1里就定义好的这个power point的数据结构，通过我们在0.2里去新增加了一个类似的方法，让他能够方便的去做打印输出和日志的记录。
	同时我们在0.1这个pre release的版本里面其实有提到，虽然0.1可以把PPT文件生成了，但是我们需要给每一页去指定它要用什么样的布局。这样的方式其实是不太符合我们所谓的，不管是国内的这个AIPPT，还是海外的一些做powerpoint自动生成的产品，其实都不太会让用户去一页一页指定它有什么布局。因为理论上布局跟模板库相关，而用户其实是不知道这个产品有哪些模板库，并且每一页的布局又是什么样的名字。所以从0.2开始，我们会逐步的去把这个布局管理和模板库给建设起来。Layout manager包括layout strategy这个模块，其实在未来会不断的去做扩展，第三个就是slide builder，我们在0.1里面其实是有定义好powerpoint及其它的一些包含的子的类，包括slide content。
	但是在整个构建这个powerpoint数据结构的过程当中，大家会发现充满了各种不同类型数据结构的操作。我们把整个跟powerpoint相关的这些操作，包括这个slide和slight content，都有一个专门的单页幻灯片生成器来进行封装和操作。Slide builder。
	最后有了这些重构的理解，包括模块的拆分以及这个布局策略的管理之后，我们再来看一下这个PPT文件的自动生成流程的时候，我们就能够理解为什么要去搭建一个ChatGPT自定义的数据结构。它为什么通过这个数据结构就能够去解耦不同的输入类型？比如说现在我们只是一个，那未来可能会有其他的不同模态的输入，然后PPT或者说这个office定义的这个powerpoint，这个文件结构本身就非常复杂。这么复杂的文件结构我们能直接用吗？我相信通过第一部分大家就能知道它的复杂性了。那既然不能直接去使用，那显然我们需要一个相对简洁的并且稳定的中间数据结构，或者说ChatGPT自定义的数据结构，所以power point的这个结构就作为了我们整个PPT generator的输入，这也是一个非常重要的解耦的设计。
	然后最后一部分是我们为其实跟homework有关，我们的0.2留下了一个片，需要大家去实际动手操作的一个homework。就是我们把PPT的部分在0.2基本上已经走明白了。但是chat的部分，我们其实前面的两个agent都已经教了大家非常多相关的基础知识，并且大家应该也都动手写过对应的代码实操过了。那我们希望在0.2的基础上，大家能够有radio去搭建一个chatbot。然后我们可以一起来探讨这个chatbot的提示工程，它的system prot应该怎么写。然后把这个chatbot再作为我们0.2的GUI，它的一个图形化界面的一个前端，那这样大家就可以自己去扩展这个0.2。
	好，那么这个就是今天的主要内容，下面我们来深入去学习一下。首先我们要学习的就是PPTX这个库，为了方便起见，我就不去念这个前缀了，我们就统一叫PPTX这个库。PPTX这个库要去快速入门和实践，其实也是有一些方法和套路的。首先这个库它相对来说比较复杂，python PPTX它本身就是一个python户，它的名字就已经告诉大家了。它是一个简单来说，它就是一个用于创建读取更新powerpoint这种文件的一个pym库。
	Powerpoint如果大家用office用的久的话，都会知道在应该是在2010版之前的这个office生成的PPT，有的是叫PPT有的是叫PPTX，包括这个word也是一样。早期版本生成的这个文件格式叫DOC，后来叫DOCX。而这个X其实就是一个大家从直觉上来理解，就是它增加了大量的复杂的文件设计，使得这个PPTX比PPT可以做更多的事情。这个更多的事情就体现在更多花哨的形式，更多复杂的结构。而这个结构其实在powerpoint这个文件类型的底层用的就是ML。XML是一种标记语言，XML、HTML包括markdown本质上都是一种标记语言。而这个标记语言其实它就是为了很好的能够体现我们文所有的文本内容，甚至其他类型内容的一个结构的一种语言格式。
	大家可以有兴趣可以去了解一下，但不需要太深入。因为我们的课程当中尽量屏蔽了这一部分的复杂性，而去使用PPTX的这个高层的API。所以说回来PPTX这个库它支持CRUDPPPTX这个文件，那在这个过程当中，PPTX这个文件具体包含的内容就有我们上节课提过的slice幻灯片，然后图像、文本框、表格、图表，就table和charts。并且它是能够在商业环境当中使用的，相信经常上我们的这个课程的同学应该经常会提到看到我提到这个开源协议在大模型应用开发时上也专门有节课去讲过。如果你也报了这节课，可以再去读一读。
	开源这件事情还是很严肃的，尤其是如果你要出海的话。那整个PPTXU库使用的是MIT的license，MIT这个license相比于我们课程使用的阿帕奇的license，它比阿帕奇的license是要稍微严格一点点，但是它是允许商业使用的。然后你在这个folk之后，你再去改造它的过程当中，你需要去。附上MIT的这个license。但因为我们是直接通过软件包来导入，而没有去fok它，所以相对来说没有任何的影响。
	整个PTX的这个代码都在github上面开源出来了，大家可以去关注一下。我们知道了PPTX是什么，为什么要用它，它有什么样的优势？这里我简单列了几点，我觉得是我们值得去选任何第三方库的时候都要去考虑的一些问题，为什么要引入这个库？
	首先PPTX应该是在对于powerpoint这种文件类型的操作上，相对来说功能最健全的。这个就像这里写到的，包括但不限于CRUD幻灯片，然后对于这个powers points文件内部的各种类型的文件，它也都可以进行操作。但需要提的一点是，我们知道PPTX本身这个文档格式是非常复杂的。它不仅仅是支持我们看到的这些基础操作，它还可以插入数据库，插入excel的公式，包括一些分析结果视频。所以他远远比大家平时用这个PPTX的深度要复杂的多，因为它能力很强。但在我们的整个ChatGPT的功能设计里面，其实不会涉及到它的全量的数据格式和里面内存的数据结构，所以PPTX从我的考察下来，它的功能是能满足前端PPT的要求的。
	同时还有一个非常好的点，就是第一条专门放在最上面这一条，就是我们的ChatGPT最终可能是一个运行在linux服务器上面的一个，甚至是运行在docker里面的一个应用。那他需不需要预装一个office，或者说需不需要预装一个office里面的这个powerpoint，也就是我们所谓的PPT这个应用程序。这个APP，好消息是说他不用，因为他操作的是XML这个结构，所以你可以理解成PPT这个文件格式底层是XML，而PPTF这个库它操作的也是XML，所以它并不需要去依赖PPT或者说powerpoint这个程序的一些API，或者说这个SDK再去操作它。而是直接在底层的数据结构上，它进行了读写相关的一些操作。所以这是一个非常好的优势。
	换句话说，即使你自己的电脑或者服务器上没有装任何的office，你想你ux server上面几乎是没有office的这个合适的安装包的，但是它仍然能够稳定的运行。那无非是说你只要自己经过完整的测试，发现你身上的这个PPTX只要没有生成这个过程当中有一些数据的破坏，最终你首先也不会在linux server上面去打开这个文件。你只需要把这个文件再传到前端或者其他一些专门做展示和渲染的平台上。也可能是导出成了一个pdm都有可能。那这样，其实整个流程就会变得非常的简单，你也能够非常轻松的去做scale。就是把我们的这个最终签PPT去做分布式的部署，或者去做多实例的一个部署。
	然后回过头来PTX还有一个好处就是在于本身我们提到了这个文档格式非常复杂，office也在不断的迭代这个文件格式。那么在这个过程当中，PPTX的这个开源社区其实一直是秉持的一个比较高标准的一个工程实践，我相信这个可能在大家的使用过程当中也能不断的体会到，还有比较全面的端到端和单元测试，让整个是对于PPTX的CRUD是相对来说很稳健的。同时它的社区非常的活跃，有非常多的文档的资源，用户的指南，API的文档等等。所以大家如果在使用过程当中用到了一些我们的课程当中以外的一些操作，你也可以去通过社区的这个文档去找到解决方案，所以这个是我们为什么要用它，why对吧？有了what？有了why？还有一个很重要的点就是how怎么样去用它。这里我就故意在0.1里留了这样一段代码，可能很多同学看到这个就很猛，而且0.1的版本也故意没有留一些中文注释，这是想激发一下他去学习他的这个动机和动力。
	首先在PPT0.1里我们就使用了大量的PPTX的方法，其中就涉及到powerpoint这个文件格式和PPTX当中的一些抽象概念，它肯定是有一定的学习门槛的。就比如说在工具就是utilize点PY这个文件里面，我们定义了一个函数叫remove all slides。这个remove all slight其实是为了让大家知道这个概念，大家至少要知道，不一定要去清楚slide底层的XML的结构是怎么回事。因为这个应该是PPTX这个库负责的内容。但是你至少得知道它是由XML这个结构来组成的，或者说来描述的那在这段代码里面，我们看到XLM的slides，我们取出来了这样的一个，或者说我们从presentation，也就是我们加载的一个PPT文件里取出来了一个叫做XML slides的列表，这个其实是很底层的一个抽象，然后取出来之后把这个slice从我们的，就大家能看到这行代码，鼠标应该能看到，就是XML slide是从一个叫SLDID list里面取出来的。而且这是一个内部的变量，前面有个下划线，取出来之后，我们又用list方法把它变成了一个列表，取出来了一个slide，这样它就能够去进行枚举了。然后我们去枚举了当中的每一页，然后XM slide去把它remove了。这个看着就有点迷幻，这个代码首先我们看下来好像是有一个列表，XML slice。
	因为它本身是从SLDID list里面取出来的，它看起来好像就是一个列表，但实际情况下不是。大家如果用type去输出这个XML slide的类型的话，就会发现不是。然后我们把它变成了一个列表之后，又挨个移除了这个列表当中的每一个元素。然后我们打印出来所有默认的幻灯片已经被移除了。
	如果我们单看一个，比如说我们自己用的这个PPT的这个软件去打开一个一个文件，打开一个PPT文件的话，你会发现在没有模板概念之前，大家可能认为整个PPT就是那一页一页的slides。然后你把那一页一页全部删掉，这个PPT就空了。再有了上节课的这个我们的介绍之后，我相信大家知道了。首先我们打开一个PPT文件，正常的这个演示幻灯片是有很多的一个列表。然后我们打开VU，打开视图之后，模板也有一个单独的模板的一个列表。所以至少从这儿开始看起来一个presentation它是至少有两个列表。然后这两个列表之间又是怎么样关联起来的，就是大家想象一下他们是怎么发生关系的，是怎么能够指定起来的，肯定不是一个简单的聊ID那么简单。所以这是我们待会儿要去给大家展开的内容。
	但通过这里的一个remove的操作，我相信大家应该有一点点感觉了。就是并不是remove了这个slide，就把所有的PPT里的页都删掉了。因为就单纯这个页就有很多种，演示页模板的一些页，还有一些别的页也许有啊。所以我们这里抛出一个正确的解释，其实简单来说就是PPTX这个SDK这个库。它本质上我开始前面有提到是通过直接去解析和操作power point这个文件当中的XML，来实现整个的高层次的各种各样的操作的。而它底层用的这个依赖库叫LXML，它和office是无关的。所以你去在linux server上面去使用BPTX的时候，不需要安装一个office。
	然后我们在这儿看到它调用的SLDID list，它本质上是powerpoint XML，就是我们的每这个powerpoint的文件类型底层的XML当中的一部分。它维护的是一个幻灯片的ID和顺序。所以你可以理解成它维护了一个我们每一页有一个ID，我们待会儿在代码当中能逐步看到这些数据结构被展现出来。
	然后SLDID它是一个内部属性，它本质上不是我们的PPTX公开的API，它是一个XML的元素，然后代表的就是当前我们这个PPTX的这个文件当中，所有幻灯片的一个XML列表。然后这个属性是由更底层的这个LXML库提供的，他就允许你直接去访问底层的结构了。有点像我们有的同学如果去学过这个C或者C加加的话，就会发现它是直接允许你去操作内存当中的对象的。比如说动态指针等等。这个就有点类似于那个概念，像我们使用拍摄的时候或者使用java的时候，你通常是很难直接访问到操作系统当中的资源。但这里的PPTX其实是有一些tricks，或者说一些你如果知道这个事儿，你就能够去访问底层结构的一些做法。
	因为python本身它并不是一个面向对象的设计，它不存在封装的成员变量。只要你知道有这样的一个成员变量，即使它是隐藏写的。用单下划线做前缀或者双下划线做前缀，看起来你直接去DICT的这个输出里面找不到它，但你只要知道源代码，你就能够去访问到它。这也是python可能不方便用OP这样的一种我们叫设计模式来进行大型工程开发的一个本质原因。
	这儿只是通过这样的一个事例，让大家了解到how point这个文件类型的复杂性，以及它的本质是由XML来进行描述的。希望通过这个大家有一定的解惑，感兴趣的同学可以去深入研究。如果对这是已经听晕了的同学，那你就跳过，你就可以忘掉这部分，我们就进入到高层CPI的学习和使用。
	那高层次的API长什么样呢？这里就抛出一个问题，就是PPTX的高层次API好不好理解？我们在PPT generator里面，这是0.1版本，PPT generator里面其实是有用到高层的API的。我们看到在这儿，右边for slide in powerpoint data到slight，这里的powerpoint data已经是我们ChatGPT定义的powerpoint，我们自定义的一个数据结构。整个PPT generator的模块是跟我们前面看到的所谓的微软定义的这个powerpoint的文件类型没有什么直接关系的。它只是通过PPTX这个库的高层次API去操作它，然后最终把它保存成了一个PPX诋层次的XML，我们是几乎不不会去干预的，那么在这儿我们具体看一下他怎么操作的。
	我们需要把我们定义好的powerpoint里面的每一个slide变成一个PPT文件的slide。那这里就有一个方法叫add slide。但这个add slide加的对象又很让人迷惑。理论上我们想的是你应该是加一页内容进去，就你一页一页的把我们定义好的这个slide加到PPT或者说加到presentation里应该就可以了。但这儿加的是slide layout，这可能就会挺挺反直觉的。
	那么加了一个layout之后，我们可以看到下面还有一些判断。比如说这个new slide的这个ships这个形状，这也是一个我们待会儿会去讲的抽象，这个是在内部非常重要的一个抽象。但是在托拉拽的这个office软件里，跟大家感觉并不明显。然后下面还有我们看到shape，还有成员属性，还有text the friend and node shape等于这个title，这些在0.2里都已经有注释了。在这儿我们为了让大家去了解这个事儿，我们0.1没有加这些注释。那我们通过我们假设没有注释来直接去理解这个代码会是怎么去看的。只有这个text frame，它从shift里面取出了这个text frame，然后把它清除了。
	清除之后，这个take frame还有一个方法叫做add paragraph，加一个paragraph加的这个paragraph来自于哪里呢？来自于我们自定义的由我们ChatGPT自定义的slide content里面的一些bullet points，也就是我们从input里面解析出来的那些要塞进去的这个正文的要点，还有一些级别的设置。然后再往下面还有一个方法叫shape点insert picture，这个有一个具体的图像的路径，这还有一个叫做十八，一个神奇的数字。18这个是shape点，place holder form type, 看这个其实也非常不好理解，对吧？如果没有注释，然后你又对这些概念没有理解的话，看起来是很痛苦的。我相信读0.1代码的同学什么是什么slide layout，又有shape，又有title，又有text frame，又有什么paragraph，又有clear，还有place folder。这啥东西对吧？听还还你还要去插一个图像插图像，还是插到形状里的，就非常的诡异，这里简单的解释一下，也做一个对比。
	首先对于我们的PPTX这个库，它的内部也有一个对也有一个对象，或者说也有一个数据结构叫slide，这个我们很难跟他不重名了，因为确实这个含义上比较明确。而这个slice的对象，我们后面会一点一点给大家讲，今天这节课大家不用着急，就这些概念大家如果现在感觉很头疼也不用着急。这也是我专门做了一个9的book，让大家去理解去学习它的一个原因。
	首先在powerpoint这个文件类型里面，PPTX为了去对它进行读写，它的高层次API抽象出了slides。这个高层次的slides的对象支持add slide，就是我们这里的第一个红框框起来的部分。它也支持get slide，就是它可以加，当然也可以获取，也可以删除，就这三个基本操作。然后获取怎么获取？其实它背后有一个sly的ID，这个slide ID其实跟XML这个就我们开始前一页看到的底层的这个XML结构是一样的。他们唯一的维护了一个ID就每一页它有一个自己的ID通过这个ID可以去获取到具体的某一页，也可以移除等等。然后当我们去使用这些高层次的API的时候，本质上其实还是在操作那些XML元素，只不过我们不需要去理解那么多内部的属性了。
	我不知道这样描述大家能不能好理解一点，整个VTX的高层次API是尽可能的去模拟大家用office这个软件的拖拉拽操作，后面我们在学习它的概念的时候应该能get到，包括什么是形状，形状的那些成员变量为什么还有坐标，什么left right、top等等。然后plays holder又怎么回事？它跟layout是什么关系，这个我们相信后面通过这一节课大家都能够逐步理清楚。
	说了这些之后就有一个问题了，大家明白了吗？大家搞明白我们的p powerpoint的这个数据类型，以及PPTS这个库怎么用了。通过刚刚的这个解释说明。
	我相信大家可能跟我第一遍读文档的时候一样，是这个梗图我们已经在课程当中出现了三次了。对，就很无语，就是怎么这么多东西，怎么这么多乱七八糟的概念。接下来我们先快速的过一遍PTX快速入门这个文档。然后接着我们再实际操作一下，应该会更多交互式的东西让大家去了解。
	首先这一个notebook在我们的0点2分支上面已经同步过去了，大家能看到它在0.2我们新建了一个jupiter的目录，然后下面有一个PPTX quick star的ipad的notebook的文件，一个notebook的文件。那么在这个文件里面，我会详细的去介绍，但是不是穷尽，因为这个库确实太复杂了。我们把它的高层这一篇我们用得到的先给大家讲一讲。
	这里有几个重点，首先PPTX这个库的简介就不用说了，大家都知道它能干什么，但是这里有一些抽象的概念，跟powerpoint这个文件当中的概念要对应起来。我们知道的PPT现在我们都知道有模板的概念，在无右视图有这个slide master。在PPTX当中，同样的PPTX的顶层抽象就叫做presentation。在0.1的代码里大家应该也看过了，我们用presentation来加载一个文件，或者说把加载的文件能够把它变成一个presentation的实例。Presentation有一个成员变量就叫slide master，它就可以直接对应着我们在office里面打开的那个模板一样。所以模板里面的所有的成员都会放在presentation的slight master下面。包括基本样式、格式布局、外观等等。
	Presentation的slide layout ts是去访问不同的幻灯片布局的，就是我们在0.1里面就有的各种layout，比如说什么title only，什么title and content，title and picture之类的，这些都算是他的layout。然后这些layout大家如果去关注的话，我们在上节课就给大家截了好多图。那些模板里面的layout都会有一些，有一个框框，那个框框里面其实是一个带有特定的我们叫内容的类型的一个占位符。其实是一个占位符，那个占位符在PPTX里面就叫placeholder，聪明的同学就知道了，占位符有不同的类型，所以显然plays holders也会有不同的类型。这样它才能够在往里面去添加，填充内容的时候不至于造成类型错误。
	那这些内容的类型要往里添加的时候，自然就有不同的方法了。比如说add text box，这个picture table chart。但这些方法大家在使用过程当中，因为PTX的版本不一样。为了用上它的最新的这些功能，我把整个0.2里面的依赖，而requirements和我的本地环境都升到了最新的PPTX的版本。这个大家去0点2分之应该也能看到，是1.0.2，我没有记错的话。好，所以这些具体的方法，大家可以如果有一些疑惑，可以去读更多的官方文档，我们就不穷举了。
	首先要理解的就是这个presentation这个类presentation应该是它的最顶层的结构，就相当于整个PPTX的文件都在这个类里面。然后这个类又有很多的属性，可以逐级的拆解去访问。这个类有标准的两个方法，一个是识别化的方法，就是它的构造方法，一个是保存的方法。这两个搞明白就很简单了，而且你几乎也只用得到这两个方法。
	去创建一个空的演示文档，就我们的这里有一行代码，就直接去调presentation，不给任何的构造构造的这个参数。那么它就是一个空白的文档，甚至我印象当中好像还是一个4比3比例的文档，经典的幻灯片尺寸。如果你去给一个文件路径，就像我们的这个加载模板一样。在0.1我们会去加载模板，就是用这个方法。他们就会去把这个PPTX的文件，所有的他能解析的内容都给到这个presentation的实例。然后你要保存一个文件，就叫他的save方法，他就会把现在的presentation的这个实例，这是一个python的对象。这个对象里的所有的可以反序列化存到文件里的内容都存下来，存到你指定的这个文件里，这就是presentation，看来很简单。
	Presentation理解了之后，接着我们要最关心的就是布局。大的文件有了，具体就是每一页。在每一页里面我们上节课就植入了一个概念，内容加布局或者内容加格式才等于一个slide。
	那我们在聊内容之前先得聊一聊布局。而且我们也看到了在整个代码里面，它的添加slide里面加的是一个slide layout。那这个slide layout是什么东西？它本质上表示的就是就像我们这张幻灯片一样，它是一个有内容有格式的。而布局更多的强调的是它的格式，以及每一个它要插入的这个占位符里面的类型。它就定义了整个幻灯片的一个基本结构了。
	未来其实你是去换这个内容的某种层面上，它跟我们在能欠里面去用到的proved template有点像。大家可以想象一下，from template就是一个模板格式，里面要填什么样的input variable，可以具体再决定。那slide layout的有点像，它定义好了一页幻灯片的整体的结构，以及有哪些空的占位服务。在模板里面其实你也可以去填一些非place holder的内容，它就会直接作用于所有的使用这个模板的演示的这个幻灯片，大家可以去试一试，这就跟我们的from tem play的已经很像了。那要去获取一个布局，可以直接通过这个点layouts，slide layouts去获取。
	那我们下面看到的这样，然后占位符是什么呢？这是我们在课程项目里面的一个提示的。这个应该叫什么？叫模板，叫模板也行。这个占位符其实就是我们现在看到的这样在有了PPTX之后，我们知道这个截图的这一里面充满了slide layout的信息，这些slide layout的信息就包括了我整个布局有哪些占位符，占位符的类型。像这儿有一个文本的占位符，这下面也是文本的占位服务。然后大家看到这还有这个add content，然后second level、third level fourth level，通过这个大家应该就能get到我们在PPT generator里面去把每一个bullet point设置到对应的这个位置的时候，还设置了一个level，那个level就是跟这儿有关系，你设置的level的级别不一样，就跟我们大家用过任何的编辑器，不管是这个word还是包括PPT的这个编辑器，你都知道这个缩进有级别，就这个意思。
	然后这些占位符其实就表征着这里一个可以被替换的内容。某种层面上就像我们input variable able，这里就是一些需要在真正去使用这个模板的时候去填充的内容。这些内容的类型就非常多了，就对应着我们上一节课讲的模板里面，这里可以塞什么样类型的内容，就有哪些place holder可以跟它对应起来，像这个模板我用office打开，它至少展示了8种不同的内容。
	那plays holder具体是怎么样的，它有不同的内容，不同的概念，那它是怎么样的一个继承关系呢？这幅图是方便大家去理解的，大家一开始记不住也没关系。这样的一个抽象方式是最新的1.0之后的PGX的一个UUML的一个类图，在这个图里面我们能看到它的鸡肋叫placeholder，每个placeholder有自己的ID，因为你要唯一的知道那个占位符是什么。就像我们的南茜里面，你有一个很长的prompt template，但是你需要有一个input variable的key，那这个IDX就相当于那个P你有一个几十页的这个PPT模板，那这些模板里面可能会每一页都有这个文本的占，那你得告诉我到底是哪个文本占位符，所以IDX是这样的一个作用，而线type就是它的形状类型，这个我们留在后面去解释，然后有一些方法，但这个方法我们没有展开了。
	然后完了之后有一个模板，master placeholder，它是继承自placeholder，它有自己的名字，而且可以add slide这样的两个方法。接着是layout placeholder，这儿肯定也有人懵掉了，就是这个placeholder怎么还分了模板和布局？这个layout的这个place holder里面怎么还又可以插图片，又可以去插这个表格，这是这咋回事儿？其实简单来说，你可以想象成master的placeholder是一个方便这个PPTS库去管理plays holder的的抽象类型。而我们真正在生成这个PPT文件和内容的时候，更多用的是the out placeholder这一层。但是它实现了一个类似于也不叫工厂方法，但是是可以通过这个基层关系去去处理的一个方法。因为它的这一层更多的是跟presentation那一层对应起来的，而layout的这一层是跟slide这一层去对应起来的。我不知道这样描述大家能不能get到。
	好，有了layout place holder之后，其实就已经到了我们刚刚这一页看到就前一页就我们前一页这里看到的每一个place holder。它的抽象级别就是在layout place holder这一层，但是你可以想象为了去高度压缩数据类型，是不是这些不同的文本的play holder，他们可以在底层的数据结构上是同一个类型。其实可以的，你你你可以去稍微发挥一下你的这个脑筋去想一想。只不过把它落到一页上之后，还得具体去有一个归属，我是在哪一个slide上。但是对于整个文件类型来说，它的master placeholders是可以不用那么多的。好，那落到具体的那一页上的时候，这个play holder就有具体的类型了。所以我们能看到有有图的，有table的，也有文本的，巴拉巴拉的各种各样的。这个就是在layout play holder下面再去派生的子类了，希望通过这个大家能有一个理解，就是place是XML底层可以去管理的。
	Master placeholder决定了整个tower point这个文件这一层级有这么多种不同的mass place holder。到每一页上面，它都有一些具体的占位符的位置类型，会用layout place holder，并且它的类型是用更下面的子类，也就是picture或者table等等这样的place holder来表达的。因为他们肯定不一样。你一个图像的占位符和一个表格的占位符，和一个图表的占位符，和一个什么smart art的占位符，一个视频的占位符，那肯定是不同的。那个层次就到了我们更底层的子类上了，到这儿希望大家能能逐步理解。好，那么有了slide layout，slide layout里面有具体的place folder。有了这两个之后，再加上内容，其实就变成一页一页的幻灯片了，就变成了一个slide。
	那slide的这个抽象是怎么回事呢？我们可以看到，首先slide就是我们的PPT当中的一页。这个名字或者说这个数据结构的名字，跟我们chat PT里定义的那个powerpoint的那个slide的名字是一样的。但是在PPTX这个库里面它会更复杂，这也是我们必须要把他俩摘出来，在在两个两节课甚至不同的这个模块上面去使用的原因，我们尽可能把它隔离开，在解析那个环节就用我们的powerpoint的抽象去装各种各样输入的类型，装成一个我们自己的这个TIPPT能够去处理的数据结构。到了生成环节再引入到PPTX这个库里，只要是在前面的大模型的内容生成，多模态的输入的处理都跟PPTX无关。一直到我们的powerpoint数据结构生成之后，才会跟PPTX有所关联。还有一个好处就是假设未来我们不只是有PPT generator，我们还有PDF generator，有word generator、markdown generator. 
	它们本质上都能跟我们自定义的powerpoint的数据结构去做对接。大家可以想象一下它的整个设计的好处。好，我们说回来，在PPTX当中的slide有哪些属性呢？它有两个最重要的属性，一个叫ships，就是形状，一个叫slide layout，就是我们刚刚讲的那个布局。
	那么ships是什么？大家想象一下ships是什么东西？大家如果编辑过PPT的话，应该都会发现，你会新建一页，建完一页之后你会新建一个文本框或者一个shape一个图形，那就叫shape。这个图形本质上是可以拖拉拽的。你想象一下，就你可以添加一个矩形，添加一个圆形，它有控制点。然后你添加一个文本框，在文本框也可以变大变小。你的字体变大变小之后也会影响它，这些东西都叫shape。然后每一页里面你都有很多的shape，这个shape也不可能是脱离内容的，所以这个shape会和那个placeholder关联起来。
	我不知道大家能不能get到这个逻辑，就这个show和placeholder会关联起来。所以你会发现任何一个placeholder它都得有一个shape。所以在最底层的placeholder就得有一个shape type，因为你有个插入的占位符，那占位符它它得表示它有多大，以及它里面是什么属性。比如说它是一个文本的占位服务，那它里面是不是有字号、字体、颜色等等这些，包括行距，那这些都会放到这个shape里面。
	那这个shape又是所有的站位服务必须有的属性，所以你会发现在最底层的抽象里它就有，所以这个就应该一下就大家逐步有这个感觉了。就是所有的占位符它都需要去描述一下它的形状，而这个形状不是我们简单一些的几何形状，而是各种各样的相关属性，我们都可以放到shape这个词上面，因为它它翻译成中文好像就会丧失一些它的内涵。但它其实不只是这个形状信息，包括样式的属性也在里面，然后最常见的一些属性就是它的name。
	这个shift有一个名字，就像我右上角这打印出来的，我们生成的这个ChatGPT demo这个文件有4页。这四页你打印出来到右上角，大家能看到它的输出slide ID0023就分别这4页的内容，然后里面具体有哪些shape呢？我们看到第零页，那它从零开始标号的，这是我打印输出的时候从零开始的。那么有title one，这个title one的shape name就是指的这个ChatGPT demo。第二页有这个title one，有一个content plays holder，其实就对应在这儿，看title one就对应着这个2024的业绩描述，也就是第二页这个幻灯片的标题。还有一个叫做content plays holder，就是指我下面的这段内容。
	然后再往下我们看到有这个slide ID2是对应的第三页了，它有抬头one，有content placement der 2，还有picture placement der 3，就是我们这儿看到的有一个标题，有一个文本，有一个图像，这应该是很好理解的。然后还有这个title one，content place folder to a picture place folder 3，也就是对应的最下面这一页，它俩的layout是一样的，所以它的face older也都是一样的。所以我不知道到这儿大家有没有get到它的这个意思，包括大家看到place holder有一些这个content place holder都是2，这是因为他们的这个位置是一样的，这个place holder他们然后如果你自己去改了这个模板文件，你把这里稍微位置挪一下，那可能这个place older的ID就变了，因为它无法复用这个content place folder，在这个大家能不能get到它背后的意思，我们通过这个shape才能去添加place hold，然后在这儿有这个加文本框，加图片的方法，这个应该好理解，就是你在一页里面有很多不同的形状组成了这一页。然后这一页里面可以加各种各样的站位服务，这个站位服务有它的位置、大小、样式、类型。然后placeholder的抽象是为了能够把内容塞进去，而shape的抽象是为了能够去对接PPTX这种复杂的样式，这两个抽象各有各的用处，而它们又是一一绑定的关系，这个是slide的这个抽象类型。
	到这儿听着有点绕，我们把这个UML内图给展开，大家应该就能get到了。就是我们的presentation和这个模板的UML内图是一个什么关系。我们刚刚已经学习了解到了一个presentation，它就是一个整个powerpoint的文件类型。而这里面有很多个slides构成，就是具体的这个slides。同时它还有一个slide master，就这个模板，还有这个slide的钥匙。
	这儿有的同学就细节的同学就会发现，你的slide master 4居然是一个S所以是不是一个PPTX1个演示的这个PPT可以有多个模板呢？我不知道大家想过这个问题没有，实际上是可以的，而且我也经常这么用。大家会发现举个简单例子，大家会看到我们这个课件里面，当然它不是一个完整的模板引入，但它肯定是从office的这个模板库里去捞出来的一些样，然后被拆解出来用的。就比如说这一页明显是大家看到它的左上角、右上角、下面是一种样式，它和我的这一页是很像的。当然这些都是PPTX的这个power point的自动用designer帮我生成的。然后这两个和这一页明显就是两种风格，其实理论上他们是来自于不同的模板的，包括我们后面有一页我先提前剧透一下，就是这种这种样式和我们看到的这种样式，它俩明显又是来自于另一个模板风格里的。所以本身一个PPTX就支持多个模板，就是我们的slide master。
	所以我们在这个UML的抽象里面，我们能看到一个presentation，它有很多个slide，他也可以有很多个slide masters，当然他也可以有很多的slide layouts，因为每个slide的masters都有自己的laws，这应该能能get到，这还有一个核心的属性叫core properties。Core properties这个我就不展开了，但这个属性最重要的一点就是它有一个叫做title的成员变量。这个title就等于我们的主主标题，就是第一页的那个主标题。然后save方法，这个我们刚才已经讲过了，整个presentation大家只需要理解成整个文件就是一个presentation。它可以有很多页，可以有很多个模板，可以有很多个layouts，然后有一个自己的主标题，有一个方法叫seve就够了。
	然后这里的slide就是我们前面已经讲过的slide的也不能叫slide的列表。Slide本身就是一个它的内部是一个单独的定义。这个slides的成员变量有这个slide的列表，有点像我们的slide里面有slide content一样的关系。只不过它能把上面那层定义成slide，里面定义成一个slide。因为它有更多的抽象需要去处理，然后这个slide里面有艾特slide方法、get方法、人物方法。我不确定在1.0你还在不在，我看他的文档里没有显著的提出他。然后这具体的每一页slide里面就是我们刚刚的前一页介绍的内容了，有它的ID有它的ships，有它的placeholders，有它的layout，然后你可以艾特一个shape，也可以艾特一个picture，巴拉巴拉。
	然后slide master。这个slide master其实是我们的那个模板，然后每一个模板下面可以有很多个不同的laos。这个好理解，就我们之前或者说我们在项目里面，在chat PPT的项目里面就有一个模板文件，这个master template t点PPTX。然后那个模板文件里面有很多的layout，我们还打印出来给大家看过，有自己的名字，巴拉巴拉的。然后你可以通过这个get bad nam去获取到对应的一些layout，也可以通过它的ID去获取。然后具体的这个layout里面这我就不再展开了。
	一个layout下面有place holder，有shape，有这个slide master，然后ship里面有name，然后有fail，有line，有at text box，有add picture。这里就非常细了，但这个结构大家可以有一个了解，现在到这儿肯定很多有点懵了，但是你看左边，其实就跟我刚刚解释的是一样的，一个完整的PPTX的文件被完整的存储在了presentation对象里。而每一个slide内就是一个单页的幻灯片，这些幻灯片的基是slide类，它不是一个slide的列表，因为slide类这个幻灯片的集合还有一些其他的操作和一些属性可以去赋予。Slide master是slight layout的集合，但是也不简简单单的是一个机构，因为它有get by an index这样的一些方法。
	然后下一步是我们操作的一个原子，他表示我们幻灯片当中，我们真正人去操作的时候，各种各样的形状，文本这个单元，有了这样的一个了解之后，最好的去get到它一层一层的概念的方式就是去新增一些内容去试一试，去去我们实践的操作一下。那怎么操作呢？这是我们继续使用ChatGPT demo，也就是我们前面生成的那个PPT有4页，大家如果有印象的话有4页。然后这四页我们用add sly的方法可以去加一页，但add slide里面要加的是一个什么呢？是一个slide layout，所以我们要去取一个slide live有很多种方法，在在那个pattern里面会有更细的内容，简单来说就是在前面我打印了那4页的slide ID，然后我们可以通过get方法去获取到它具体的那一页的layout。拿到之后再把这个layout加到我们的presentation里面，就变成一个new slide。然后这个时候我们再去看presentation的幻灯片数量就从4页变成了5页。
	因为加了一页加了一页之后，我们去改一改它的标题。这个slight、ships 0、name是title 1，像我们前面这一页输出的一样，是开头一，它的shape 0。如果还有多个shape，shape 0就是第第就前面这个shape一就下面这个shift 2就是在下面这个。因为shape 4是1个所有的形状，那么shape 0是它的名字那的内容。因为它是一个文本，我们可以把它改成测试新增页面标题，然后把它保存到一个叫做chat PPT下划线update的文件里。我们可以看到这就是它新增的内容，那显然我取的是最后那一页，把标题改了，这个地方的text都改了，叫测试新增页面标题，但这儿没有内容。
	所以大家发现没有，当我们用PTX去add slice的时候，我们先加了一个什么呢？加了一个布局。所以你把布局加进来，其实相当于这一页就有一个模板一样的东西了，是加了一页待填充的特定的这个layout。然后你还需要往里去按照它的shape的名字和类型正确的往里填充内容，它才会有真正的内容。而不是像我们平时在PPT里操作的control c或者command c再复制。在复制的时候你就会发现，好像我们的这个呃PPT的这个新的复制的一页好像是带着内容的。但其实不是。待会儿我也会给大家实际操作一下，让大家理解。
	这个区别就是内容是内容，格式是格式，复制的时候到底复制的是什么？其实这个问题大家如果经常用VT就能发现其中的差异。好，这个是新增一页，并且我们只改了标题。那如果我们还要去改这些怎么办呢？你要改正的这有一个文本，这里有一个图片，怎么改？其实这就涉及到在这一页里面，我们要怎么样去更多的去了解shape了。因为理论上他们都在shape里面，就是我们的place order定义了类型，但是具体它有什么样的特性是由谢溥来定义的。
	首先我们来了解最简单的是文本。在在我们的最开始讲0.1的时候，大家应该就还记得的话会有这一页。在0.1里面我们判断了if shape点head text frame，然后text frame等于C点text frame，这个我还用鼠标高亮了，那么这个text frame是什么呢？这个text frame就是我们的文本框，我们只要用过PPT这个软件的都会新建一个文本框，新建一个文本框之后，你就可以在里面设置各种各样的跟文本相关的东西了，字体、字号、颜色、行距、左对齐、右对齐。就你能想象到的一切都能操作，而这一切的操作的属性基本PPTX都可以去操作。
	这儿我们重点讲两个。第一个就是建一个文本框，文本框得有内容，这是我们必须得有的内容，所以我们可以从这个text box里面去获取到这个text frame，就拿到那个文本框了。那文本框里面可以塞一个内容叫这是一段文本。然后我们还可以去添加一个文本框，这个文本框就是我刚刚提到的我们的这个带有坐标位。待会儿我还是得操作一下这个软件，可能大概好几家这个软件里面的这个内容，然后文本框的内容叫take free，然后它的内容里面的字叫text。但是我们也可以通过paragraphs去加一个段落，这个好理解。
	就是你想象一下，假设你现在看到了一个文本框，这是一个框，但这个框除了里面的frame以外，还有一些外部的属性。然后这个框框叫text box，里面的这个东西叫text frame。然后里面的这个text prem也可以填text，就是里面的文字，然后这个文字可以有字体，这是显然的，都在放的这个属性里，还可以有段落。就是你写了一堆之后，就像这儿写了一堆之后，我点一个回车，它就换到下一段了。这个段落要加上去，叫做add paragraph，add paragraph之后它就兴起一个段落。那字体有这个字体的名称、字号，包括是用的加粗、斜体、下划线等等这些都可以。所以我们再看这里的这个示例，这是一个新的段落，这是加粗的内容，这是很方便的可以去设置的。
	然后这儿我们再来看一下，把刚刚的这些概念整合到一起之后，我们要怎么样去新加一页很多文本花哨的这个样式的内容，其实跟刚刚前面讲的那几节是整合在一起的。最上面这个添加一页幻灯片，slide layout，然后把它艾特进去，然后去填充一下原有的布局当中的占位符。因为你加了之后，它原来的那一页里面有很多占位符是没有填充的。你只是复制了雷奥T要把它填充起来，一个是title，一个是content。然后填充之后我们再去加一个文本框，在shift里面去加一个文本框，然后额外的文本框内容，这个就是我们新加的文本框里面写的内容。然后再去加一个段落，这是一个新的段落，再加一个加粗的字体，然后把它存起来。对，然后我们刚刚看到的这里有一个ID这个ID是怎么来的？其实在右边输出的，包括它有两个文本框，我们需要在这儿去填充，这个在我们实际操作的时候再给大家看这儿，先把这概念理解对齐是我们后面研发需要用到的东西，最后长出来是这样的，大家可以看一下我们填充的python PPTX新增文本内容示例，填充原有的文本占位符。
	这俩就是原来的play hold，大家可以看到在26左边中间这个位置，一个是title一个是content，被我们填充了。右下角这边其实是我们新增加的部分，额外的文本框内容是我们新加的一个box。然后我们add了一个paragraph，叫这是一个新的段落。紧接着我们没有add paragraph，它就会接着写。但是接着写的这部分，我们去给它加粗标红了。就是在左下角这儿，paragraph里面我们有一个ad run，这个ad run就是我们的跟文本的字体等等要去设置的一个方法。然后这个方法里面。可以设置内容是什么，要不要加粗，字体是多少，然后它的颜色是什么，这个就可以把它在右边对起来了，这个就方便大家回头去调试测试。
	有了这样的一个概念之后，很多人都想知道怎么加其他的格式，其实类似的add picture，add table and chat都可以通过ships来进行添加。然后这里的left top就是左边顶点宽度高度就决定了你的这个框框最终它的插入点在哪个位置，然后可以填图表以及图表，这个就是我们PPTX。大家能够在接下来的这个版本当中，可能会见到的各种各样的方法和一些核心的数据结构和概念。以及跟我们的PPT的这个powerpoint的这个文件类型里面的一些概念。包括我们在office里操作的时候的一些概念，对齐的一些内容。好好，那么先看看大家有没有什么问题，我感觉听到这儿可能很多同学会会很懵，会很疑惑，有什么问题我们可以先QA一波，然后我们再来操作，以免待会儿操作的时候大家感觉像天书一样。
	大家有什么问题吗？到这儿为止。
	都没有吗？这么强去拿瓶水。
	有个同学问，这个算是制作PPT模板的过程吧？不是，得再说一遍，就是模板是一个我把这个打开。模板是模板对吧？演示的文档是演示的文档，他们共同组成了一个PPT。
	大家到这一节课如果还会有这个理解的话会有问题的。就是你要理解一个PPTX的文件，它就是包含了slides，也包含了slide master。他有演示文稿也有模板。然后他俩是不是割裂开的？他俩从来就不是割裂开的，就像我们在office里面，就是在第一节课上一节课下载的这个模板一样，它有演示的文稿，它也有模板。你删除slide不影响模板，那你删除模板会影响slice，这个能理解对吧？
	然后我们的PPT generator不是在生成模板，是在生成一个PPT。所以你想你要生成一个PPT，那你是不是得有layout？那layout怎么管理？用slide master来管理是这个逻辑，工程要从工程是从输入的要生成的内容出发，然后大模型生成对应的PPTX的模板，还是根据已有的模板结构对应去生成内容往里面填，这个是一个好问题。
	首先大模型没法帮你解决模板的问题，那个模板是要审美上的要求的。大家理解一下，PPT的模板是为了审美，就是让它看着更美观、更好看，这个是slide master的好处。所以大模型肯定重点不在这儿，大模型在生成各种各样的内容。但是你要注意ChatGPT是一个整体性的产品。我们不可能去做任意场景下的自动内容生成。所以最终我们会选一个场景，这个场景肯定会有美观的模板，是预设预设计好的。这个模板通常我们叫模板库，这也是作为一个AI的产品的核心资产。你的模板越做越好，那那当然就越好。
	然后同时这个内容要跟这个模板匹配起来，所以后面下半节课会讲这个布局的管理。后面肯定不是说一个内容只有一种可以选择模板，或者说布局应该是有好多种布局。就像我们在AIPPT或者在海外的那些产品，你看到的你可以选很多种，无非是颗粒度的问题。
	你是只能选一整套slide master，还是你一个slide master选好之后，里面的slide layout也能换。这是两个层次，有了这些概念之后，我相信大家应该能理解这两个层次的区别。甚至你想你的PPTX里如果有多个slide master，那是不是还被这个混合着用。就像我开始给大家展示的，这个是一种slide master的格式，而这个是另一种slide master的格式，它是不一样的。
	文本框或图片的位置属性，比如left right设置很不友好。是这样的，就是你要想象一下，模板库是一个很大的功能，它是需要有人去开发的，然后它竟然是一个功能。那是不是说一开始你的模板里面的那些plays holder，大概率是通过手工的方式去布局不好的那不好之后你是不是就知道有多少种放标题的位置，有多少种放目录的位置。那些值理论上你是应该跟着你那一套模板去获取出来之后，变成一个特定的值放在那，而不是你手工去想的。我不知道这个逻辑能不能get到，就是你想象一下是设计师也好或者说产品经理也好，他选了一套模板。这套模板里面有很多的layout，每个layout里面有它自己的一些shape shape有它的位置，这些位置是我们通过写完代码去get出来的。并且理论上来说，你所有模板库里的模板，它的命名格式应该也是标准统一的，不能随便命名，不然你没有办法去动态的管理和匹配。
	内容和多个模板的布局不完全匹配，每次换模板的时候都还需要调整如何处理？你能讲的再细一点，我没有get到你的意思，每次换模板都还需要调整如何处理是什么意思？对，和多个模板的布局不完全匹配是什么概念呢？是你的这一页要用模板A那一页要用模板B是这个意思吗？如果是这个意思的话，你有两种解决方案，一种是把两个模板都用进来，本来就支持代码支持这样去做扩展的，把它俩都加载进来，最终slide layout是铺平的。这个slide layout是可以让支持让你你的第一页用模板A的某个slide let out，第二页用模板B的某个slight layout。这个应该能理解对吧？
	然后如果你想说你的所有模板都没有某一个layout去满足你这一页的内容。那如果是这种情况，那你就应该去扩充你的模板库了。这个毫无疑问的，因为你穷举了，你所有的可以提供的模板都满足不了这个内容。这也是我说我们不可能去重举所有的场景，这个不现实。而且这也不是一个在后发入局的时候去做的一种做法。大家应该在看到别人已经做过了，但是还没有做的很好的情况下上节课我们讲过了，要构建的是差异化的优势。这个差异化的优势是什么？对吧？
	就做大而全永远是死的最快的，这个我相信稍微有点工作念头的同学都应该能理解。
	大家还有什么问题吗？没有什么问题，我们就来实操，让大家get一下这些概念。
	看一下有没有什么问题。
	咱们有用过模板的吗？应该这么说，没有从来没有用过PPT模板的同学能写个一吗？然后我有个概念，就从来没有用过PPT模板。能写个一吗？
	两个咱一共有啊。对，应该这样，从来没有用过的写个一，用过的写个2。这样我好像有个统计，就你用过模板的写个2。不会没有二吧。还是有的。
	林是什么东西？
	大家还是都用过，那应该会在一半以上是用过的那应该还比较好啊。有个同学说这个加载图片的时候，图片和模板当中的picture大小不匹配，怎么调整？就是所有大家在用这个过程当中，感觉到他不舒服，好像样式不对的时候。我的建议是你要你的第一件事儿，你要想的就是如果你没有用这个代码，而是你手工在操作，你会怎么办？
	再回到这个具体的问题，你要插入一个图片到一个picture placeholder那儿去，插过去之后你发现不匹配。现在如果你是人手工操作，你人手工操作的时候，你是不是压根就没想过用face的，你是直接把一个图甩过去的，所以你的样式是不统一的。我不知道这个描述你能不能给得到，就你压根就没有用模板。就是我说的真正用模板不是你的文件你带的模板，而是你整个文件的PPTX的设计是每一页都有plays holder，然后你是往plays holder里面插那个，而不是它只是一个地图或者一个footer这样的东西。而是每一页文字有多大，然后图像有多大。这些你这些东西你不管你，你都只是用那些粗的颗粒度，那个跟用模板其实是两件事。但凡你是按照有place holder这种用法，那它的place howler有多大？就像这儿看到的，他就是按照这样的方式在用这个模板。
	那你往这儿插图的时候，你的图的比例跟它不一致，那天然就是会被裁剪掉的那这个时候就两种情况，人来操作就两种情况。一种就是大家知道这个PPT有一个功能叫裁剪，我应该叫裁剪。反正这个英文版本里面就crop。你点了这个图片，然后上面有一个picture的这个二级的菜单栏，你点开之后它有一个裁剪，你就把它裁了，这是一种。那其实就相当于你在往里面塞之前，你先去获取一下那个picture placeholder的分辨率也好，长宽也好。那你拿到这个长宽比之后，先对你要插的图进行一次裁剪再放进去，那就不存在不匹配，对吧？不匹配是因为你没按照这个最佳实践来用这个部分。
	第二种情况就是你发现你的图很重要，这个picture的plays holder它就是应该要适应你的图。那这个时候就来了，问题就来了，其实就说明你缺少一种layout去适应你这个新的这么大比例的图。那你要么就去新建一个sly slide layout，然后那个新的slide layout的picture plays holder，它的shape是按照你的这张图来的那它自然也是一个新的模板，新的layout。因为原有的layout没有和它适配的那这个时候你插进去之后，你就会发现，其他部分的shape会不会跟它不和谐了或者不适配了。如果没有影响，那你就相当于新增了一个lout。如果有影响，你还需要去适当的调一调，其他的部分是这个逻辑。
	所以我不知道我刚才那个描述大家能不能get到，然后类似的所有的内容填充其实都是这个逻辑。所以真正厉害的模板本身就是这个叫什么？就是有好多种样式，你能想得到的。
	然后同时我们能够在chat PPT这个层面上做的事情是什么呢？其实我们反而要反向的利用已有模板的优势，去反向约束那个内容生成。就是比如说你要控制它的文本内容不要生成太多，然后是以bullet points这个方式去形成的。然后图像因为我们是一次性生成的，我们甚至可以配图。那我们配的图是不是可以提前去做预处理？甚至我们配的图就有一个图片库，这个图片库就跟我们的模板库是匹配起来的。
	这些是做做产品的时候要去全方位的考虑的。就是大家不能在只是陷入一个研发的视角，而需要陷入一个整个产品的视角。他怎么做让大家觉得它出来的东西是美的，是愿意付费的那就是得多个维度去想怎么解决的对。所以我不知道这个描述有没有让大家get到这个点，好啊。
	我觉得这个同学问的问题也挺好的，但是这个不是你这样理解的，就是思路是内容适应模板，而不是模板适应内容。首先你的模板哪里来的？你说你没有模板，那你适应什么模板，对吧？就是不是非黑即白的，所以是先生的鸡还是先生的蛋呢？你这个问题就没有意义。我不知道我这么解释你能不能get到，就是没有所谓的内容适应模板还是模板实际内容所有的情况都是根据你手上有的资源来做控制的。
	就像有的同学说的，US team如果有给一堆的模板，然后你先要做这个项目，你有模板了，那你是不是有先发优势？那你先发优势就是有这个模板，它也挺美的，那是不是你的你自己想要再去扩展chat PPT的时候，你可以用你的模板的优势。那你如果没有你适应什么模板呢？对吧？然后我也说了，其实模板微软官方就有很多，你可以去下载。然后也有很多这样的网站你可以去下载，只要没有任何的版权的风险，你都可以去下载。
	然后问题是你有没有想清楚你的PPT是拿来干嘛的？先有场景，这类场景一般是什么样的模板格式。然后这一类场景里面我们要怎么样去生成内容，能够适应这个模板的格式。但反过来也可以看，你现在用的这个system prompt，它在什么场景下生成的内容质量高，再去找模板都可以，这取决于你要做什么。我不知道我的解释有没有让你get到这个意思，就是这个世界上做事情的时候，不是像读书的时候要这样做，只能这样做，不是这样的。
	好，我们来实际的操作一下，让大家加深对这些东西的理解，这样这些PPTX的使用和API应该就很熟了。
	好，我们接下来就实际来操作一下这个PPTX，我们在0.2里新增了一个旧Peter。
	看一下。
	放大一点的。0点2分之，然后我们访问这个就拍ter目录。大家注意这个to Peter目录里面的文件，目前只有一个PPTX quick star。然后这个quick star就是我右边在本地启动的这个文件。然后为了启动这个文件我的直观感觉应该是绝大部分同学在开发开发特指开发chat PPT的时候，可能会跟我一样使用mac或者windows，而不是直接在linux server上面去开发。因为它会涉及到开发过程当中频繁的去查看我们的PPT生成的是不是正常的，所以整个PPTTTPPT的开发过程，可能大家都会看到，用的是macos在本地去使用的。
	然后我把这几个先删掉，这是由PTX生成的。然后这些也都在ignore文件里，所以大家在我们的0.2版本里看不到，也正常，我们希望你自己去生产，并且你生成的也不要上传到代码库，所以右边是对应的代码，我们打开这个。Requirements，大家能看到这个新的版本已经变成了1.0.2，不是0.6的版本了，这应该是最新的稳定版本。
	第二个点就是我们在ignore里面，忽略了就pitter下面的PPTX文件。所以你不要把你自己生成的各种测试文件传到你的代码库里了。因为PPTX本身gate是处理不了的，它都会变成这个代码库的一部分历史资料，一直占用你的git。
	好，那我们现在就去操作这个，就拍lab这儿应该大家都熟练怎么去使用了。因为是在我的本地，所以我可以不用加密码，大家访问不了的，就直接用就拍lab就可以启动。就by lab的安装就不讲了，这应该都会了。然后把它拷过来，因为我刚刚关掉了，所以它会告诉我server connection error。因为我刚刚把lab重启了，但是因为启动目录没变，所以我同样可以用这个方式去访问local host。启动起来之后。
	启动。
	起来之后，大家应该会跟我一样。咱们这个目录就是放大一点，就是我们的chat PPT的项目目录。然后在拍摄里面有这个文件，点开就是这个文件，它在这个目录。那我们接下来来实际操作一下，为了让大家能理解，我再回到这个目录下，就拍照这个目录下有这个文件，那我们接着来看这些，其实我刚刚在课件里都讲过了，就不再赘述了，来让大家熟练一下这些操作方法。我们首先看到的从PPTX里面我们导入了一个presentation，这个presentation就最顶级的这个类，放大一点再执行一下，导入了创建了一个空的presentation，并且我们啥也不干就把它保存下来，看一下这就新生成了一个the presentation。他在我的第二屏幕，稍等我把它拷上来。
	在。
	在这儿，这是我们新生成的这个presentation。它是一个空白的屏幕，这空白的这个PPTX，并且是4比3的这应该是沿袭了从很早期的PPT文件的默认值来的。然后我们知道怎么把这个4比3改成16比9，对吧？在在我们之前的0.1里就已经给大家讲过了，这儿我就不再给大家展示了，就硬其实就能改它的尺寸再回到这里。
	好，第二种就是我可以打开一个文件，打开一个PPTX的文件，我啥也不干，我就直接保存下来。这个其实不会对原来的文件做任何的更改，这个应该好理解。然后outputs ChatGPT demo就是我们之前生成的文件。在outputs有ChatGPT demo这样的一个文件，我们把这个文件用把这个关掉了X。我把这个直接退出，老影响第二屏幕。先把它收起来。然后我们把outputs刚刚的这个文件打开，这个presentation直接就是打开了给的一个路径save再存下来，存就存在就拍摄目录下了。
	这是刚刚生成的那我们再看一眼。没有做任何的更改，而且它的模板也都在。Slide master这大家就能理解了，就一个presentation里面它就是可以有slide master。然后slide master下面这个叫slide layout，这个叫placeholder，the place folder关掉，关掉之后这个是slides，有很多的slide。那每个slide里面还可以再去做扩展，这是我们下面要看的内容。所以，slide layout是布局。我们可以这直接相当于我们打开了一个模板，这模板就是我们代码库里的这个模板，这个模板里面没有slight，只有slide master。
	所以大家用英文的PPT应该就特别好理解，至少我自己是很好理解的。就因为它的整个界面，它还能不能放大？不能，它放大不了。大家如果看我鼠标，这个英文的office，它这些概念跟PPTX是对齐的。因为它们是一种语言，所以我们看到这儿可以slide master，这就相当于新增加了一个slide master。那下面有自己的slide layout能理解对吧？这就两个slide master在这一个presentation里面了，然后这里也可以insert layout，那这个insert layout就是这里的slide layout，这个应该能对上号。这样操作一下。
	对，这样把这个删掉。好，我们加载一下这个slide layouts，这个slide layout s就是把这五个加载起来了。然后。这个name。打印出所有的一共有这六个，这六个怎么来的呢？我们可以通过这里。
	看的。
	很清楚，这个上节课就讲过了，title only title，content title and picture one, 然后title and content and picture一共六个，就对应的这里的六个，这六个slide layouts name就可以通过这个方式去访问出来。只不过我不知道在view界面里面有没有一个方式让他同时能看到名字，我只能一个一个用于name来看见名字。这个大家如果知道的可以告诉我。
	好，然后这儿也有大家能看到insert place holder，所以这些概念是完全能对齐的那我们下周会讲face hoder，然后我们在这儿可以取，比如说倒数第二个，倒数第二个名字就是他这个title and two column one，我们可以看到倒数第二个。Title and two on one。所以这个是完全很方便能够跟PPTX的slide master能够去对上号的，并且它的slide layout也是能对上的。然后接着就是这个站位服务，我们看看这个站位服务放大一点，这个站位服务刚好就这一页，就这对，就这一。然后我们这个占位符的概念，其实刚刚我们在这儿也看到了，我们可以在这个layout slight layout里面去插入各种各样的站位，比如说我们插入一个chart插到这儿，这就是一个恰当的站位符，大家能能看得到吗？就左边这里有一个chart的占位符，然后这个chart的占位符我在PPT里新建一个let out是没有变多的，但是我也不是，这应该是倒数第二个。对，这就有一个chat，这个chat是可以直接去编辑的。他他打开了我的一个excel。
	有点。
	卡卡住了。
	欧菲是还是比较占占资源。
	我就关掉了。所以这个play holder的概念应该能对上号了。他自己生成了一个模板，还真插进来了，先挂掉了。就他刚刚插进来的一个chart，他自己生成的随机数据，那你也可以去改样式，这个大家就自己玩一玩，应该都懂的。
	然后那place holder其实就这么一个概念，在我们的slide layout里面可以有各种各样的类solder。而且之前我们就说过了，如果现在把这个chat删掉，我再关掉它是不影响的，因为它已经实例化出来了。这也是为什么在模板里面要有一个slide layout，然后在对应的这个slide里面也要去添加一个slide。因为当你一旦用了这个，我们这儿看到的这个，在下面add slides。一旦我们add slides之后，它在模板里面的这个layout就相当于变成了一个实例，已经给到我这边的slide里面来了，而不再受模板那边的影响。一旦你给到slide这边来之后，哪怕模板全部删掉，这也不会有问题的。这个大家一定得get到他的意思。
	但是有一种情况是例外。当然今天可能我们讲不到，就是我在这个地方我写了一些具体的数字，甚至可以有序序号。比如说我可以加一个。不是。我可以加一个特定的文字，text box，你看这个概念也是对应起来的。
	Next one比如说我写了一个ABC。这个ABC会过来的，大家能看到吗？这边有个ABC这个是会有影响的。因为它相当于直接直接硬编码的一个东西，这个是直接作用于所有的这个layout的，他一旦用了这个，并且我们新增一个的时候，它也是自带这个APC的，但它已经没有chat，这个是略有不同的。这个硬编码的部分，但我们暂时还用不到这么深，就想跟大家说这个区别，这个ABC可能不太明显，我换个颜色。
	在在。拉打野。他的。它的颜色去哪？这红色压缩放大。
	一点。
	对。这样应该就能看到这个ABC它会作用于所就相当于这个类的变量和成员变量一样，有点类似。就你在模板上面的硬编码，它是会直接作用于所有从它实例化出来的slide。但他如果是一个placeholder，不会因为这个placeholder在它实例化的那一刻传递给了那个特定的slide。这个大家得得注意一下它的区别。
	好，那么我们接着往下看啊。好，然后是到了play holder，police folder这儿，我们这个应该就好get了。就说我们在这儿有一个具体的页，就这一页，我们把这一页打印出里面有哪些place folder，它一共有title one content content就这俩content，两个pays holder，还有一个footer和slide number，就是左下角和右下角一个叫footer，一个叫side number，一共五个based holder。在这一页对应着我们的。对应着我们的这里，这里有一个特定的，看不太清楚，放大一点。这个位置也是一个play solder，然后这里也是一个特定的placeholder，所以能打印出来。接着就是placeholder的一个继承关系，这个前面讲过了，我这就不再赘述了。
	然后slide这个幻灯片，这个slide就对应着我们的这里的slide，这里的具体的一页的内容。这个slide里面有shapes，有slide out。这个slide out好理解，就是我们从模板那儿获取到的这个布局，而shape就是指这一个一个的东西，一个一个的形状，就相当于我们。
	在在。
	这儿可以加一个文本框，在slide里面可以加一个文本框，比如说叫做slide text，给它换成一个白色高亮，换个字体。雅黑。再来个下划线。我们在这个地方，在具体的这个slide里，就第二页slide里加了一个文本框，加了一个线，它肯定不会影响别的slide，对吧？他们是完全无关的。
	然后这个shape除了文本框以外，也可以加各种各样的具体的东西，加图像，这就是ship，最直接的线、形状等等，都可以往里去做添加。然后这些东西也都有对应的属性，所以shape是在slide这个跟slight直接相关的，是属于slight的这个成员变量。然后一个slight里面可以有一堆的ships，这些都是不同的ships。但是这个ABC是无法编辑的。因为这个ABC理论上就跟我的雷奥里面的这个地图一样，是无法感知的，就是我们看到的这些东西一样，但我可以把这个图挪走，把这个图挪走，这里的图也会没有了，这个大家能理解对吧？然后这个图我还是无法编辑的，因为它是layout里面的东西，它不是place older，那我们就撤回一下，太丑陋了，就长这样的。好，这个大家应该能get到。
	然后我们刚刚手动的加了一个sly text，就等于这个add text box。然后我们也可以手动加一张图，那等于这个add picture要加的这个位置，四个坐标点就是它的这个位置，也可以拖拉拽。好，那我们接着来实际操作一下，我们加载的是ChatGPT demo这样的一个文件，在outputs里面。
	这个。
	是没有下划线，没有下划线，所以它的最后两页是长一样的。然后加载进来，然后获取到它的第一页。第一页的第一个线的内容是ChatGPT demo，就相当于我把这个先删掉，先缩小，后面应该用不到模板。来给大家看一下，就相当于这里presentation的第一页就是它。那这里面有哪些shape呢？目前只有这一个shape，那这个shape的内容就叫像PPT demo。那么这里应该能看到前面的demo，我们执行到这儿了吗？对，然后我们接着来执行一下这个所有的馅我们便利出来让大家了解一下就能开始。
	课件看到的一样，一共有4页，每一页我打印一个slide ID，这个ID是随着我们的这个，我把这个加一个，让大家看着跟图上是对应起来的。比如说这里的slide ID一就第一页，ID2就第二页对应的。然后每一个slide ID下面是它当页的所有的线。这就能很明显的看到的，第一页下面有一个title one. 
	第二页下面缩小一点。
	第二页下面有title one和这个content，第三页还多了一个picture，第四页跟他一样是个picture，所以第三页跟第四页他们是长得一样的线，这个是有意而为之，大家能看出来，跟这个截图是一样的。好，那么我们知道了这个shape了，知道了这里有这些shape，我们还想知道它里面的内容，那是不是可以通过text去把所有的内容也打印出来，这里我们试一试。十八报错了，白底三报错了。
	为什么会报错呢？我们回想一下这里的内容。Title content title content picture picture有没有text的属性呢？事实上是没有的。但是通过这个大家就能看到place folder是有更底层的子类的。像这个text显然不是属于很父亲类的这个属性，它是很底层的一个，所以说很很派生的子类上面的一个属性。而placeholder picture也是一个图像的placeholder的属性，它肯定没有text文本框才有，text box才有。所以当他去输出这个第二页，也就是这儿的ID我又没有加一，会让大家有误解。
	这里按照我们这个统一的数字，就第三页，这个第三页这一页有title one业绩图表，content利润不断OpenAI利润不断增加，然后shift name，picture placement der 3，所以shift name就是那个placeholder，它是一个绑定关系。这个大家现在应该能理解，但是他打印的时候，这个shape的text没这个对象，对吧？报错是这一行，shaft tax没有这一行没有这个属性，所以他当然要报错，所以这个是by design。我们去打印每一页的形状名称和文本的时候，如果它不是文本，比如说place holder的picture，它是会报错的。所以不能这样去获取我们一个slide里面的所有的内容，因为不是每个内容都可以像文本一样，像字符串一样打印出来。
	那怎么办呢？我们下面再来看看怎么去处理这个基层关系现在大家应该能理解了，就是一个presentation，下面有slide，有slide masters，有slide layouts，也有这个core properties，它能save，把它变成一个文件。那slice里面有这个slide，也有这个add和get的方法。具体的slide下面有一个ID，可以通过这个ID去获取，就是我们在slice里面有个get方法，它传入的是ID。然后slide下面还有ships，有play holders、有layout，可以add shape、slide master、layouts、layout ts这个就很对称了，还有具体的shape，然后这个UML内图是chat t4O生成的，所以大家如果它不够美观，也可以自己再再调整。
	那我们接着再看，要打印每一页的所有的信息，所有的属性，怎么打印呢？这个也是GPT CO生成的代码，就这个打印属性我就直接执行了让大家看一眼。这个打印属性就相当于每一个slide。大家看到这是for s in presentation到slide，那这里的S就是一个slide，就每个slide里面有个slide，把这里的slide取出来便利，所以每个S就等于这里的一个slide，就是这个对象鼠标框起来这个对象，那怎么打印呢？
	肯定它首先有个ID，有个layout，layout很难可视化打印出来，但是我们能看出它的不同，然后有shapes，有placeholder，然后shape和placeholder是两个列表，所以他们还可以再进一步的遍历打开。有他自己的name，有他自己的type。这里play holder有他自己的ID有他自己的type，那我们打印出来之后就能看到，这里的四页有不同的slide。ID256257258、259，这四页。然后shapes是指它有多少个，是一个嫩方法去数了数它的个数，这个也是数了数它的个数，那shift 1、shift 233，显然它的个数和它的个数应该是一一对应起来的。
	好理解对吧？就是决定了它的样式，而place holder决定了它的内容。针对一个具体的操作单元来说的，就是这样一一对应的，那么shift detail里面就有，这里也有这个一对一。再往下面也都是一样。这里我也解释了这个slide ID是什么？雷奥是什么，shift是什么，巴拉巴拉。
	接着我们再来看，如果要新增一页的内容，要怎么样去操作。大家看这个259哪儿来的？这里来的不是神来之笔，是这个模板里面本来就有的，而不是模板是生成的ChatGPT demo里本来就有的这个文件。只要没有改过，这个slide ID理论上不会去动的，然后我们去get slide . 
	ID这个。
	方法返回的就是一个slide，对吧？Presentation的slide的get大家可以看一看这个集成关系，presentation的slides就对应到下面这儿了。Slide的get，get里面传的是一个slide ID，它返回的是一个什么呢？是一个slide，那我就获取到了什么呢？我其实就获取到了那个259 slide。259的这个slide有一个叫做slide layout的成员。所以大家一定要结合着这个URMLUMLUML的类图，以及你对这个powerpoint的文件和office足够熟的话，你看这些东西是就是很很自然的，很顺其自然的。然后我也建议大家把那个office改成英文的那你就直接能看到对应的变量，就特别好。
	对，所以这儿获取完了之后，相当于就拿到了这个东西，相当于我们的last slide layout，就等于这儿PPTX点slide点slight layout object。所以slight layout本身就是一个对象，是一个PPTX预定义的一个数据结构的实例。那么拿到它了，那按照我们之前知道的add slide方法，add slide的方法里面要加的是layout而不是slide。这个在这也有add slide的方法对吧？Presentation点slides就是它点add slide这个方法传入的是一个layout，那这个layout就是259号ID的slide的layout，返回的是一个slide，and slide传的是the out，返回的是一个slide。为什么会这样？
	我们再来看一下，如果我们在PPT里实际操作会怎么样？我们在这儿选择一个布置，他会直接复制，那我找个课件。比如说我找一个在课件里的这个复制，大家发现没有？这个复制他的这个雷奥他是没有带上的，或者说他这个模板他其实没有直接加进来。这就是我说的designer的一个trick，大家发现我在这个里面使用的模板就两个，而这两个模板显然是没有这个玩意儿的，这种灰框框是没有的。那这种灰框是通过designer产生的，大家能看到吗？
	Designer这里有各种可以去替换的，而这种功能我觉得应该是office还没有完全放开的这应该也是去年才上的功能。而这个功能它显然是脱离了，或者说它没有再复用slight master，而是他用的什么所谓的偏智能化的一些功能。所以因为他没有把模板加进来，没有把slide master加进来。所以我去复制的时候它会丢掉这个layout，这layout就没了对吧？哪怕我这已经又生成了一个designer，我再去复制的时候它还是没有，就是这个原因，就这个原因。
	所以但是你要想带上它，也有些trick，就是有个叫做duplicate，这个就是完整的去拷贝一个slide里面的layout加上ships。现在大家应该能理解PPTX这个数据结构，有layout有shapes，那显然我们的普通复制它只复制了ships，而没有复制the out。我把这几个删掉，这个大家能get到就非常好了。好，那我们回到这一页，通过这个获取到了lout又又新增了一页之后，这就有一页幻灯片了，那这个新增的一页幻灯片就使得我们的presentation的总数变成了5，这个好理解，还没有执行，执行一下变成了5。
	那变成五之后，显然原来的这个最后一页它叫做新产品发布，那我们把这个新产品发布这行给它改掉。我看这个是title one，然后给它改成测试新增页面标题。然后我们把读进来的这个presentation，就是读的这个chat VBC demo，然后新加了一页，并且把那一页的标题给改了。然后再see save成这个ChatGPT update，save到哪呢？Save到了这个jupiter里面，jupiter里面，我们执行一下，这就有了一个新生成的ChatGPT output update。它就有一个新的一页，这一页叫测试新增页面标题。然后因为我们是通过这个就这一页这一页我们怎么怎么新生成的。
	第五页大家再回想一下这个过程，第五页里面我们先把它的layout拿出来，然后添加到了这个PPT文件的最后一页。所以最后一页就是有layout，但是啥内容没有，没有内容我们就去给他设置内容，所以理论上我们也可以获取到他的第二个这个shift就shift 1，然后再去给它填一个内容，然后也可以给它的ships 2添加一张图片，怎么添加图片，怎么添加文本，其实上面都已经介绍过了。好，这个是简单的加了一页，我们知道怎么加一页了。通过这两行应该和这个文件的生成应该能够深刻的理解新增一页的过程，要加一个layout，这个layout通过add slight方法之后，返回给你的就是这一页。这就是new slide。然后new slide的这个title one的text被我们设置了，但是剩下的ships我们还没有设置，你只有设置了它才有。当然你也可以把这两个shift直接删掉。我们看这个new slight的话，它其实它的shape应该是不止一个的ships。三个，所以这两个在这，但是没填充内容，是空的。
	好，我们接着再往下走。假设要添加更多的页面内容，这就涉及到了take for me text box。那这我们再看一眼，什么是text frame，什么是text box。假设我新增加一页，新增加加这一页，这个就是用。这个新增加的，说错了。其实就是复制的。
	就是。
	复制的这个layout，那这个layout复制下来就跟我们刚刚执行了这一步是一样的，他也没有设置这个应该能get到，这就是title one。好，那假设我要添加别的内容，我不增加这些，我可以，他没有空白页，那么删一个这个都删了。假设我现在要增加一个文本框，那这个文本框在insert里面就有这个text box。就大家看到我鼠标的这个text box，这就是一个文本框，这是一个text box。而里面的这个光标散着的内容，先把文字改成白色的，光标闪着的这些内容，这个是text frame。我正在说的这个是text frame，我不知道能不能get到。然后这个text prime显然它是你可以理解为成就外面这个框框和里面的内容。外面这个框框它需要有一个定位的这个left top和这个宽和高。那其实就是挪这个，挪这个就决定了这四个值，然后我们看到里面的这个点text就是指这段文本，然后我还可以有段落，就说明本来这个地方是一个text brain，然后我可以给它换行。
	再来一行。这么多行不同的行，其实就通过at para去增加的，这是新的段落内容。然后我们的字体它本身也是选中再去作用的。就比如说我针对这一行设计成了一个红色的字体，这一行分解成了一个比如说黄颜色的字体。所以这个字体它也是要通过teragram上面的and round来运行的，你可以整行去给他设置，然后设置完了之后，再往下我们把这些全部都整合起来，直接给大家印证一下。这里就把新增加的这一给打印出来，两个place for order，然后给它填充内容，然后生成保存在ChatGPT append text，这也是新增的一个刚生成的文件。
	这里我们就能。
	看到。
	额外的文本框内容，这是一个新的段落，这部分是加粗的文本，是长这样的那如果我们在这个地方就去给他设置了，这个就不演示了，这个太细节了。我相信大家应该看这个，回头再再二次去自己尝试，应该能get到太多更多的细节。然后这儿我们就往后进行就是通过这个文本的各种使用，大家应该能get到这个添加的在单页里面的更多的一些操作了。
	然后其他的格式其实是类似的。比如说我要加一张图，我要加一个table，我要加一个chart，其本质跟加图更加这个文字是一回事儿。然后如果它本来有place holder，那你就通过这个名字往里添加，就像这上面一样，它本来有space older那shape它就有一个能找到他是那个背后的。如果你要在原有的模板layout之外在新加，那这可以add text t box，add paragraphs，add picture at table. 
	它就是在模板在雷奥的之外，我再去加一个东西，我再去加一个格式。这个是我们的python PPTX这个库的整个快速入门的一个文档，一个notebook。希望大家能去多试一试，应该能更深入的去理解咱们是怎么在运行这个PDX去生成我们最终的要的这个文件。
	然后这里有一个homework，课件里面也有，我这边再额外写一下。我们知道还有一些添加其他格式内容的方法，这个homework是一个必选项，因为后面你也会用到，免得大家会问很多关于这个库的问题，就不好了。这个库是一个应该掌握的东西，而且也不是什么都去学，是写高层次的API。那我们现在有一些添加其他格式内容的方法，希望大家能够使用这个PPTX去自动生成一个powerpoint文件，可以是从0到1的，也可以是基于我们生成的某个文件。这里我们也演示了，你不一定是要基于一个模板来继续操作，你也可以基于一个已有的演示文稿再去进行操作，然后往里去再加一些内容，加什么呢？文本、图片、表格、图表，也覆盖了我们这里的不同格式的内容，然后最终提交一个你新增加的，就是怎么去生成它的那个代码以及那个PPT就可以了。
	好，这个是关于我们的PPTX快速入门的一个实践的一个展示。好，看看大家有没有什么关于他实操的一些问题，尤其是跟我们左边这个视窗里面的这个PPTX这个软件，不这个PPT这个软件的一些观点还有些不明确的。看一下。
	去个洗手间啊，看看大家有什么问题抓紧提一提。
	那当然有问题吗？没有的话，我们就往下进行了，我得把这个模板给他。是。公司。
	它还是自动保存，没删掉。在5U里面。
	好。
	我看有个同学有问题，那个presentation的成员变量slide masters。
	啥？
	什么东西，我看一眼，有同学问的。
	你的问题是啥？我的slide layout类中的成员变量，slide master. 和slide masters有何区别？在实操中如何体现？好问题，这个我还真没有那么确定。
	这个同学你问的就是首先这个slide master这个模板是一堆，我们还是把这个打开来做说明。这个是对应着我们这个概念，应该叫做slide master。那能不能高亮看得到？Slide master对应的是它，然后它是有一堆slide layout，这是六个slide layout，然后这六个类slide layout的列表是这个slight layout ts这个应该好理解。然后slight layout ts是可以移除slide的样子，就比如说我删掉一个，那就变成五个了，对吧？到这儿应该都能理解。
	然后到这个slide layout这一侧的时候，它有自己的placeholder，比如说这儿有两个placeholder，然后有自己的ships。是因为这个placeholder它的具体的样式、位置在这里面，并且是一一对应的这俩都是列表，这个应该已经很清楚了。然后它有一个slide master，这儿我没有去，首先坦白来说，我没有去严格的读这个成员变量它的作用效果。然后我能够理解的是这个slide out它的成员变量。Slide master是为了标志出这个slide out，它属于这个slide master。
	当我再去加一堆slide master的时候，这里就会出现在整个presentation里面，就会出现很多的slide layout。他是需要快速能够找到我这个slide yt属于哪个slide master，而做了这样的一个设计，这是我理解的。当然具体的可以再详细读一读文档，我不知道这个有没有解释清楚。
	就我们在这儿应该也能看到，你可以insert slight master，那就等于。删掉了。你insert一个slide master就是一整个，然后你的。我不知道能看不到它的完整属性，可能在界面上不一定有。页面上可能不一定有。对，但我的理解就是这么一个关系，他为了更方便的去做批量操作bat的操作。
	还是用英文，同志们用英文简单的多。对，然后4比3是标准尺寸，这个宽屏16比9是不是默认值？对配置的。
	好，如果大家没什么问题，我们就看一下0.2版本的代码。这个代码也没有那么难读了，因为加了很多的中文注释之后，应该很好理解了。好，那我们就开始下一个小节的内容。这刚关掉了，那我们继续。
	好好，接下来我们来讲下的PPT的0.2版本，也就是文本到内容生成功能的研发。这个是0.2版本的主要功能，然后也为后面的各个版本去做了一些铺垫，方便去进一步扩展再强化一下。我看到了现在PPPPT第一节课上完之后，其实没有太多同学去进一步的把这个作业跟进，可能都比较忙，但还是希望大家抓紧，因为这个后面肯定也会有更多的homework。那么第一节课的homework相对是比较简单的，大家一定要folk star，然后再才能看到你们真的在做。你都没有folk，你不可能自己改了代码的对吧？所以大家去积极的推进一下作业进度。
	然后接着我们就看一下在0.2跟0.1的区别。在0.2上面我们首先增加了一个conflict Jason的配置文件。这个配置文件也是为未来考虑的，就是我们的这个配置文件里面有三个重要的配置项。第一个配置项目前还没有直接使用，叫input mode。就是我的这个PPT目前支持哪些输入的类型，输入的模式目前是支持text的这个模式，然后默认的这个模板是哪个，未来也许是支持一个模板库。第三个就是一个layout mapping，就是我们的布局，这个布局有一个名字，就是雷奥有一个名字，然后雷奥他有一个ID这个有一个绑定关系。当然后面我也会去讲这个玩意儿往长线发展，它跟模板库应该是匹配起来一起去迭代的。然后我们的同样的内容应该有不同的layout，但这些需要手动的去做一些模板，也是第一节课其实给大家布置的相关的作业也是类似的。
	这个要求就大家首先要能够熟练的相对熟练的去操作模板文件。然后接着模板文件里面的that name等等。你操作熟了，你后面要去迭代其他PPT的时候，哪怕你不用自己造模板，你去网上下载的模板，你也得把名字改成我们统一的标准格式，对吧？然后去运行它，就可以通过python这个source下面的面诊PI去运行。
	然后这个参数是一个可选参数，是指我们输入的这个PPT内容的这个文件的路径，默认就是test下划线input，点这个MD，应该还有个input斜线，这个是默认值。然后现在这里展示的这个形式，就是它的实际使用情况。你在面点PY里面指定一个参数，就是你要输入的这个文件，然后代码的这个source，下面的代码也进行了一定的重构。首先就是我们刚刚在上节课讲的PPTX的这个quick star的notebook，在这儿就拍照下面，prompt下面有一个formatter点TXT，这是一个system的front，后面我们会去讲它是用来干什么的。然后source下面也新增加了一些python模块，包括data structures点PY，就数据结构的PY文件，然后layout manager，我们的布局的管理，然后slide builder，就我们构建slide的一个模块。这个是我们整个0.2的主要的一个代码变化。
	那我们接着就来看一看具体它的变动点和这个原因。第一就是我们看到在data structures点PY里面，我们不仅把之前0.1版本定义好的slide content，slide和这个powerpoint移过来了。同时我们还新增加了一些变化的内容，一个细节就是sly的这个目录下面，不slide这个结构下面，我们发现它不只是存了原来的这个let out名称，我们有the out ID有layout布局的这个名称，这个是一个变化，大家可以去对比看代码。
	第二个就是powerpoint下面新实现了一个叫做双下划线来拼接的一个STR方法。这个方法是一个python的语法，你只要定义了这个方法，你去print这个powerpoint的实例的时候，它就会按照这个方法下面的定义来输出。这是一个比较常规的的做法，也是大家如果要自定义数据结构，又想要做好日志记录的话，都是这样去做的。
	然后输入的文本格式也有变化。在0.1里面，我们所有的不管是主标题页还是下面的这些页码，都会有一个叫做layout name放在这里。然后这个layout name还得是跟模板里面有的能匹配上的才会能够生成。现在我们就沿着这个设计目标，就是正常的使用里面通常来说是不会指定的样子的。所以我们移除了这部分内容，移除了layout的内容，这个输入文本格式其实也就变简洁了，比之前还少了一块。
	这儿就有一个例子，就比如说下面我们看到有一个叫做，其实是我们第一个agent get city，它的一个输入文本的样式。那这怎么来的呢？这其实是由GT4 omni生成的，输入是它的reg ME，输出是长这样的，那么这个就是我们0.2的这个data structure，它有了一个简洁的变化，然后输出的样式，我们刚刚说的这个语法堂，双下划线的这个string，当它打印出来之后，会长这样。我们看到解析转换后的chat PPT的powerful point的数据结构，这个就是它打印出来的样式，一共有8页，github的city now概述，title layout，然后title layout bull points，title layout bullet points等等这样的一个内容。因为我们的这个read min里面，我没有再把文件什么的再放进来。目前我们还没有支持文件的这个作为输入，所以还没有加进来。但是如果你的文本里面本来有本地的文件，显然现在这个也是支持的在0.10。
	好，那么往后the out manager干了一个什么事儿？我们知道现在已经不可能让用户去显示的指定我要用什么布局，这个不太现实。用户其实不知道你有哪些布局，更不要说有哪些布局名称，那我们长期来看这块应该怎么样处理呢？首先布局我们MVP的版本，最简洁的版本我们应该理解应该是由这个产品本身定义好有哪些不同的布局策略，就比如说举个最简单的例子，这里定义了4种布局的策略，分别是title only，就是只有一个title的，一般是第一页，但是不排除像我这样可能有多种。比如说我们的第一页是长这样的，它也是一个title only，但它可能还有一个subtitle，就是这个speaker的信息。但是有可能我的每一个章节它也有一个这种title only，所以它并不绝对，它当然也是应该是一种layout of strategy，所以这个是一个显然的。第二个，跳到第二个就是。
	title . 
	and content，就是我们的既有这个title又有文字内容，它就比较像什么呢？比较像我们的我找一个比较像我们的这一页，我们的homework这一页显然就是有一个title，然后有一个content，这个应该是好理解的。然后我们再看。
	第三种是什么情况呢？就是title and picture。其实现在这一页就是一个典型的title，and the picture给我们有一个title叫基于内容的布局策略与管理。这个显然是两张图，你也可以设置成一张图，两张图都可以title and picture，这也是一种策略，第四种就是结合起来有title、有content、有picture。这四种策略其实是在枚举我这一页里面有可能有哪些内容的类型，而这些内容的类型显然无法我们说的是MVP最小版本。你长期来做这个地方是要做持续优化的那最简单的这种样式，就是由类型的排列组合的不同而定义不同的布局样式。
	好，有了这样的一个布局样式之后，我们首先能做到的第一点最低要求就是用户不用指定我要用什么布局了。而是用户他的内容给到我们我们基于他的内容来自动选择一个布局的策略。然后怎么选？其实就这段代码我们看到定义了4种策略。这四种策略里面有一个方法叫assign layout，就是根据内容给策略。它的assign out的输入是这个slide content。这个slide content是我们刚刚在我们自己的数据结构里面定义的那一页的内容。它的返回是一个元组，一个int一个string，分别表征的是我的layout的ID和我的layout name。这个好理解。
	然后那我们看看具体的执行，就是我们不管这个衣服else是什么含义，我们只看它最终返回的是一个所谓的strategy。然后strategy是通过self点strategy来获取的，itself点strategy就是上面定义的这四种策略。所以比如说我们这儿选择了self点strategy，title content and picture, 其实就等于这里的最后这个strategy。最后的这个strategy，title content ent pictures r strategy就等于我最右边，我们这儿看到有一个title content and picture distraction。它有一个get layout方法。这个get layout的方法其实就是我们这儿看到的，大家仔细去看一下，就这儿它是基于我们的layout strategy去派生出来的。
	而layout strategy，它是一个抽象的布局的基础鸡肋。这个鸡肋它没有实现任何的方法，但它要求它的子类必须要去实现一个获取布局的方法。这就是为未来去做考虑的。就想象一下这地方未来应该怎么扩展，假设我们现在仍然是根据我们判断这个内容还是只有四种组合，但是这四种组合我们是不是可以先扩展后面的strategy。就假设我们现在有一个title only，就只有一个这个主标题进来了。
	但是这个title only的strategy后面我们可以有一个layout的group，就有一个布局的主。而这个布局的组，当我们在用title only strategy去get layout的时候，我们是不是可以做成一个random去获取的。或者说我们可以基于一些智能的策略去获取的。比如说它的字体大小等等，这些都是有可能的。
	我不知道这个大家能不能理解，就是我们在各种派生出来的具体的strategy里面，我们不是一个写死的，还只有这一种layout可以返回。而是在这个get layout方法里面应该去大做文章。这个大做文章不仅是基于内容，可以是基于各种各样的策略，这是一方面。第二方面就是我们的布局策略，就我们的左边的layout的这边的self strategy也可以有很多种，而不只是四种。甚至你也可以不只是根据内容的类型的排列组合，内容的类型加上数量再排列组合，可能也是一种方法。
	总之这里其实是未来的模板库加上布局的这个细腻度控制要去持续优化的一个点。也是未来大家如果要把现在PPT再去做延展，要比较重要投入的一块。因为这是设计美观和它的内容加格式匹配的一部分。当然还有一部分是我们的多模态大模型，是我们课程当中会重点去教大家怎么去对接各种模态的大模型。但layout模板这个可能我们只能给大家打备案，剩下需要大家去花时间去做扩展。
	好，这个是the out manager。有了这个之后还有一个叫做slide builder，我们看slide builder它导入了data structures和layout manager，就把我们前面两个模块定义的内容导进来了。那分别导入了什么呢？Data structures导入了这个slide content和slide，they out manager里导入了they out manager，这个布局管理的是这个类。那么slide builder它的作用就是去构建一个单张的幻灯片，怎么理解？就看最后的这个final这个方法，这个方法返回的是一个slide的对象，就是把我们的所有的在slide build里的信息组合起来，返回一个sly的对象，这个是最所以从finalize往回看是比较好理解的一个slide数据结构它要实例化它需要哪些？需要layout ID，需要layout name，还需要content。这个数据结构大家应该能记得住，这是0.2版本定义的数据结构，一个slide对象需要这三个later ID layout name和content。
	那这个content又是怎么去做出来的，我们看一看content是怎么来的？Content是在final ize里面先组装出来的。这个slide content需要什么呢？需要一个title，需要一个bullet points，还需要image path。目前我们需要这三种类型的内容，标题、文本框、图像。未来如果我们要增加不同的类型的slight content，其实也是在这儿去做扩展就好了。它是相对解耦的，我们要新增加什么？
	我们要支持的类型，在PPT里就去扩展slide content，然后在slide builder里面在这一步去给它去做对应的实例化，然后类似的set title，set bullet point, set image也是可以去做设置的，然后bullet points可以有多个，它这个部分其实有点类似于我们把plays holder跟shape尽可能的去做整合。然后layout ID lout name，image path等等。这些的信息都在slight builder里面。然后通过finalize一次性的构造成一个slight的对象。然后往长期看，我们可以看到未来如果我们的模板库要去做迭代的话，那其实也是在slight builder这边可以去做文章。就是它的内容部分可以不变，但是它的layout部分可以去变化。
	就相当于你已经把一个PPT生成好，你要去针对某些特定的页去做调整的时候，也可以用slight builder针对那一页单独去改它的layout，然后再变成一个单独的slide。这个slide再走后面的PPT generator去单独生成一页去替换，这个都是可以串起来的，甚至你不替换，你只是把它变成了一个我们的powerful point的对象都行。因为我们可以想象，如果你要去做一个完整的产品，你可以绕过渲染一个PPTX文件，而是去渲染一个咱们定义的powerpoint的数据结构。其实大概率AIPPT也是做类似的事情，因为他要去在他的界面上去做各种各样的样式的编辑，肯定是它的自定义数据结构会更简单一些。
	好，那么有了这个之后，我们再来看PPT generator，应该就非常简单了。我们再来看这个地方的代码的话，前面的部分没有什么大的变化。模板文件，然后移除，然后这有一个core properties点title，这个就是我开始提到的，我们在presentation里面还有一个属性就是core properties。大家目前只需要知道这个properties里面有一个title，设置好就好了。再到下面我们能看到，这里有这个针对slide这个lif ID这个是我们自定义的这个slide，去判断是不是大于这个slide the house，如果大于的话就不能用了，就相当于我们自己的layout manager里面给我们自定义的slide存了一些布局的ID但这个布局的ID已经超过了我们从模板里面找到的这个layouts的数量了。那肯定是不对的。然后如果没有的话，那么就直接去去取就好了。然后这个new slide这行代码就跟我们刚刚Peter里面的对应起来了，比较熟了。
	大家再看这个命名，就是我们从这个模板文件，首先在我们的这个ChatGPT的这些版本里面，我们简化问题。我们的模板里面没有，不要保留原始的slide，就留成一个空的，或者说用remove去除掉之后它也是空的。然后你再往里去添加的内容，就是相当于用那个模板，去往里填内容。
	未来如果要支持多个模板，那就要把PPT generator这边再去做扩展。就是针对多个slide master要去怎么样去用它的lout。但无论如何它的slide这个就是presentation的slide这边还是一个从0到1的过程，然后你就往里不断的去add slide就好了。
	Add的过程当中，这里的slide layout是根据当前我们的自定义的这个slide下面的layout取出来的。然后加了一个new slide，那这个new slide里面就有布局了，但是没有内容，那你就要逐步的往里填内容。比如说填标题，填这个文本内容。然后文本内容填的时候，因为我们是bullet points，所以我们能看到这里还有add paragraphs，然后设置。如果你要改字体，改颜色，其实现在你也应该知道能在这里怎么改了。然后加图像，这个我就没有截进来这个图片了，在代码里面都有，就可以按照这个方式再去加了。
	所以理论上你完成了jupiter里面的那个homework，这个PPT generator里面的各种样式设计也都能够去做对应的调整。当然最好的方式还是把你想要在代码里面手动去加的那些放到模板里，那模板里面的那个shape自然就有那些类型了。我不知道这个大家能不能get到我的意思。
	然后最后一个就是我们怎么样为下一个版本考虑，但是这儿也是留给大家的一个homework，就是怎么样去考虑我们。首先我们现在的这个0.2版本的输入是一个markdown的文件。这个markdown的文件是要满足一定的格式的，就比如说它有就像这儿是下面这个from写的一样但这个节奏有点问题，这个里面应该没有抬头念这些了，这应该是杰的一个老版本的。它有一个特定的样式，然后这个样式在markdown文件里面被我们的0.2版本读取进来。读取进来之后可以再进行后面的流程。
	但假设我们再往前考虑，就是我们的输入应该是一个有各种各样的场景。假设我们现在的场景是给了你一个原材料，就给了你一堆文档。这个文档希望你把它变成一个我们的ChatGPT markdown的格式，也就是下面这种格式。那变成这种格式之后，接着你去做进一步的解析，生成PPT是这样的一个流程。但是前面这一步原材料到这个markdown的这个格式本身，我们也是希望首先大模型就应该介入进来，甚至未来这个地方是两个agent，一个agent生成各种，一个agent收集各种各样的信息变成原始材料，再由我们这个地方的第二个form for matter的agent再转换成这个特定的格式。还说这两个合二为一，其实都是可以有的解决方案取决于我们的prompt和大模型的性能的强弱。
	这儿我们先提出一个引子，假设我们的场景是用户给了你一篇，比如说政府工作报告，比如说公司的文档，然后让你生成一个这样的PPT，就是把一个word转成一个PPT，就类似于这样的一个场景要怎么做？那我们可以设计一个简单的system prot，就像这里看到的一样，那么待会儿我们可以用ChatGPT来用这个GPT4o ChatGPT的i playground来感受一下。所以这个是一个前置工作，并且这个工作我们故意把它留成了一个homework，这里就提一下homework，这个homework有两个。第一个是刚刚在patter里面就已经讲过的，就是我们让大家去熟练使用一下PPTX库，用它来自动生成一个powerpoint的文件，内容是包括文本、图片、表格和图表的。并且希望这个过程当中，你能够把生成的那个powerful point文件上传，并且把对应的代码也上传。
	第二点，就是我们使用radio去搭一个chatbot，这个其实应该在language mental里面已经讲了很多次了。不管你是用这个chat interface，还是用这个blocks去接一个chat box都可以。然后它的chatbot的核心就是用户输入的其实就是一个word文档也行，一个一堆内容也行，就是一堆字符串也行。然后你通过这个chatbot把它转换成一个ChatGPT支持的这个标准输入格式，也就是我们前面定义的那个输入格式的要求。然后最终生成一个powerpoint文件。所以这里就有两个级别或者说不同的要求，最底线的要求就是所有人都得完成的。
	这个homework的要求就是用我们的system prompt，可以是刚刚我们0.2代码库给大家展示的那个，也鼓励大家去自己去写和优化一个prom出来。然后相当于你的这个prompt在chatbot上面，最终生成了一堆markdown。而这个markdown要不要跟我们现在0.2的主流程整合起来，这个是一个可选的作业，你可以选择把它做成两阶段的。那么在chat board那生成了一个markdown文件，这个markdown文件你可以把里面的内容再丢给我们的0.2版本，也可以你直接就把它们整合起来。其实就是把面点PY里面的代码变成一个函数，然后由我们的check board再去调用。然后生成的结果可以再用radio的file，就它的函file这个函数。有一个函数是直接把输出里面可以支持文件的下载，你可以把那个东西就做到video里面，那它就能直接下载这个PPTX，这个是可选的作业。
	好，那我们来实际看一下这个0.2版本的代码。首先0.2的这个代码，在0.2的这个分支，然后它相比于我们上一个节课讲的时候，这个分支增加了一些内容，其中就包括各种各样的中文注释以及这个jupiter。然后我们在SaaS目录下可以看一眼。
	在SaaS目录下我们可以看到这个data structure是被单独抽出来的一个文件。然后我们的layout manager里面定义好了我们要用到的这个基础的layout strategy的抽象，以及它四个派生的子类。这四个子类主要去实现这个get layout方法，然后layout manager里面这个布局管理器，其实就是根据我们的当前这一页的内容的类型，去自动选取合适的布局策略。目前是支持这四个，然后当我们去实际去根据这个内容去给这一页slight content分配或者指定一个布局的时候，就是调这个assign的out方法。然后传入的是slight content，返回的是一个layout的name和ID，ID和name这里应该能看得出来，那谁去调用这个laos manager呢？其实就是我们的slight builder。Slide builder它导入了lift manager，然后在这个finalize方法里面，就这个方法里面我们看到它实例化的一个slight content的对象。然后把这个slight content的对象拿去调用了这个sign方法，然后获取到了他的ID和f name，然后就构成了slide所需要的三元素，然后就可以去实例化一个sly的对象。
	我们再看到这个PPT generator里面。在这个PPT generator里面generate presentation的代码其实现在再看就非常简单了，尤其是添加新的幻灯片这一行，有新的幻灯片设置标题，添加文本的内容，插入图片。未来我们要去扩展slide content的时候，也可以去插入charts，插入这个smart art都有可能，最终保存成这个output path，保存到这里。
	我打印一个音频级别的日志，然后我们的面点POI文件也添加了很多的注释，大家可以看一下，这里有各种各样的解释，就不再赘述了。然后这是一个可选的参数，input file默认值是这个inputs下面的test input，然后执行一下看看。这个主拍摄就关掉了。
	我们先执行一个默认的文件，这个日志应该能看得到。放大一点执行这个默认的文件，可用的幻灯片布局解析转换后的ChatGPT powerpoint n的数据结构，这四页，然后debug级别的信息，这个是PPT generator里面的debug级别信息，在这一行。说错了，在。这个位置，就这generator里面有一个设置幻灯片标题，是添加列表项，插入图片，这些都是第八个级别的信息设置标题、列表项、图片等等，最终有一个演示文稿已经保存，就是我们看到的这一行。那它生成的这个文件就是ChatGPT空格demo跟0.1略有不同，在outputs里面有一个这个文件。
	是刚刚生成的，我们前面在讲PPTX的时候已经反复查看过了，这个关掉。你们先关了。然后我们再换一个inputs，假设我们看到这里有一个。Github的这个是我们的第一个agent的描述，它长这样的那怎么来的呢？我看看有一个ChatGPT的playground，这大家应该都很熟，应该算是咱们应用开发实战营的基础中的基础了。
	然后我们给了他一个system的instruction，这其实就是一个system的prompt，这个是哪来的呢？这个是我们的。Prompts for matter这里来的。然后这个in chinese是我刚加的，一会儿我会提交上去然后我们看到把这个提交给他之后，我们就写了你是一个富有能力的助手，很擅长去处理writing content and organic organizing input，从various source into a clear standard。就是变成一个标准的格式，然后就写好了。
	写好之后，这一段是哪来的呢？熟悉的同学应该就知道，这段应该是来自于give up city now的read me。我们看到这里有一个内容，get up的city now是巴拉巴拉把这一段复制下来，复制下来我们给到ChatGPT的playground，就这些内容。然后assistant生成的是长这样的，就对应着我们。我看一看，在input就对应的这个内容，这个应该能看出来是一一对应的。然后我们再把这个内容交给我们的ChatGPT去做生成。能看到这是python source inputs，github setting down intro的这个文件。很快生成，这个速度很快。
	可用的幻灯片布局转换之后的结果，像这样的8页，然后具体的内容可以想象，打开不会特别好看，为什么呢？它因为用的是同样的layout，所以这儿但我没有留how work了，因为确实homework比较多，我知道大家工作也很忙，但大家可以去尝试去初步改造一下。就是把我们的模板里面，尤其是这个layout manager，这我留了一些to do，是未来大家可以去做的这个地方，这个也还没有提交更新。我们看到其实layout manager未来是有很多事情要去做的，有to do，为每一种放大一点，这里有一个they are strategy，就为每一种布局策略的子类，具体的这个布局策略应该要准备一组候选的布局组。
	那这样的话，当他实际去get layout的时候，比如说这儿，或者说现在他都用的是这个title and content这儿的时候，他能够去根据他的候选组去生成不一样的布局，即使它都是title and content，对吧？这是比较常见的做法。就算是AIPPT，大家去注意的话，它的开端content可能也就两种，最多三种。所以要完成他那样的体验，你只需要找一个好一点的模板，然后每一个专利去准备2到3种，你要形成一个let group就可以了。然后还有一点就是我们未来是要去扩充这个模板库的那去扩充模板库的时候，需要去校验一下你的布局的名称，lif name和它的占位符及其占位符的类型。这个也是我们可以去离线做，你也可以做成一个工具，带图形化的往里上传一个PPT模板，然后自动解析出来结构化的内容再去改都可。但无论如何，你去扩充你的模板库的时候，要做类似的一些操作。
	好，以上就是我们前PPT0.2的主要内容。希望大家能够在这节课主要是需要了解PTX，了解power point的数据结构类型，然后动手去把原来我们学过的技能再移植到这个项目上，把它的前端全部连上，然后我们再逐步的去扩宽它的输入类型。好，那么这节0.2的内容就到这里。看看大家有什么问题吗？老师你用的是什么？Python framework? 你说的python framework是指IDE吗？如果是IDE的话，就是VS code。
	看大家有什么问题。
	如果市面上已经有了一个，再叫一个，理论上没有，除非就是这个商业产品它取了这个名字，这其实是专利法。这个你可以你稍微查一查其他GPT。但我简单来说就是一个商业产品它取了这个名字，那他也只是取了这个名字，它可以广而告之宣传。但是他如果没有去相关的工商注册，现在叫市场监管局去注册商标，那么这个就是自由的，谁都可以用。
	然后就算他注册了商标，你要知道这个商标是分行业的，他如果在的那个行业和你是不冲突的那显然是不相关的。就比如说他是卖肉的、卖酒的，你是做科技的，你俩就算名字一模一样也无所谓。因为他保护的是那个行业下的权利。当然他也可以一下申请很多个权利，但是申请很多个行业的这个权利保护，但是他得说得过去才行。他不能说我是一个卖猪肉的，我要去申请这个航天航空的这个名字的保护，那是不合理的，市场监管局也不会允许的。然后这也只是限于中国大陆，如果你要去海外发展，那就要去海外的相关所属的国家和地区，去对应的监管机构去进行申请权利的保护。是这样的。
	大家还有什么问题吗？
	对话，我一会儿发到群里，还真是，我好像没有放到课件里。是的。
	你的用的库是开拓起还是丁家狗是啥意思？那个同学。
	大家啥意思？没太看懂你这个问题，同学。
	大家还有什么问题吗？我确实没看懂这个同学的问题，这个有有理解的吗？可以帮我说明解释一下。这个啥叫framework？有有同学能能看明白了吗？
	上节课作业的时候生成的PPT一直报错，有啥改错的方法吗？把你的报错发给ChatGPT，这应该是交第一个意见的时候就说过的方法。
	目前项目里所用到的python库应该只有PPTX和log，就是read me里的。目前用到的就这两个，如果你要去用就拍lab，就再装个jpl lab，就这两个。那你的office是不是正版的？是不是office有问题？对你你第八个，你跟前台GPT聊吧，好好吧。就你这个说法很空对空，没有办法给你回复。
	对，目前我用的这个office打开的都没有问题，所以我不太清楚你说的那个问题是啥。然后我用的这个版本，我看看我用的啥版本。我的office版本。
	这应该是office 365订阅版本oma c16.74。欧哥，这个能不能对你有所帮助？就你说的损坏那个，我不知道是不是你的模板那边有点问题。对，有的同学说了，把默认的幻灯片删掉就没这个问题了。是的，这个我记得上节课上课的时候也说了，就是模板文件里面的那些slides你要删掉的。那个remove可能不一定能删除的那么干净。因为每个模板它自定义人工去定义的时候，都叫什么八仙过海的，各显神通的。对你直接手动的用office把他们删掉是最简单。
	我们做那个remove方法，其实是想引出这节课的PPTX的这个高层次和低层次的数据结构。对，是当时是这个动机。对，这个取决于你当时用的那个模板是什么版本。就跟你不同的版本的PPTX不同版本的PPT保存的文件，用其他的版本打开，偶尔也会出现这个问题一样的。所以你不知道当时做那个模板的人是怎么回事，然后就是这么回事儿。对，就这么简单，也就不是你想象的需要怎么样去折腾的，就是有有标准处理手段的，你可以试试。好，大家如果没有别的问题，我们今天就到这里了，感谢大家。然后homework大家一定得去做，这个一定得去搞一搞好吧，那我们就到这里了。